"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata, RequestMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class NodeApprovalMode(str, Enum):
    r"""Device Approval Mode"""

    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"
    REJECT = "REJECT"


class FieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class Fields(BaseModel):
    r"""Custom Fields"""


class CreateOrganizationFieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class CreateOrganizationFields(BaseModel):
    r"""Custom Fields"""


class LocationsTypedDict(TypedDict):
    name: NotRequired[str]
    r"""Location name"""
    address: NotRequired[str]
    r"""Address"""
    description: NotRequired[str]
    r"""Description"""
    user_data: NotRequired[Dict[str, Any]]
    r"""Custom attributes"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[Dict[str, CreateOrganizationFieldsTypedDict]]
    r"""Custom Fields"""


class Locations(BaseModel):
    name: Optional[str] = None
    r"""Location name"""

    address: Optional[str] = None
    r"""Address"""

    description: Optional[str] = None
    r"""Description"""

    user_data: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="userData")] = (
        None
    )
    r"""Custom attributes"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[Dict[str, CreateOrganizationFields]] = None
    r"""Custom Fields"""


class PoliciesTypedDict(TypedDict):
    r"""Node role policy assignments"""

    node_role_id: NotRequired[int]
    r"""Node Role Identifier"""
    policy_id: NotRequired[int]
    r"""Policy Identifier"""


class Policies(BaseModel):
    r"""Node role policy assignments"""

    node_role_id: Annotated[Optional[int], pydantic.Field(alias="nodeRoleId")] = None
    r"""Node Role Identifier"""

    policy_id: Annotated[Optional[int], pydantic.Field(alias="policyId")] = None
    r"""Policy Identifier"""


class CreateOrganizationRequestBodyTypedDict(TypedDict):
    name: NotRequired[str]
    r"""Organization full name"""
    description: NotRequired[str]
    r"""Organization Description"""
    user_data: NotRequired[Dict[str, Any]]
    r"""Custom attributes"""
    node_approval_mode: NotRequired[NodeApprovalMode]
    r"""Device Approval Mode"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[Dict[str, FieldsTypedDict]]
    r"""Custom Fields"""
    locations: NotRequired[List[LocationsTypedDict]]
    r"""List of locations"""
    policies: NotRequired[List[PoliciesTypedDict]]
    r"""Node role policy assignments"""


class CreateOrganizationRequestBody(BaseModel):
    name: Optional[str] = None
    r"""Organization full name"""

    description: Optional[str] = None
    r"""Organization Description"""

    user_data: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="userData")] = (
        None
    )
    r"""Custom attributes"""

    node_approval_mode: Annotated[
        Optional[NodeApprovalMode], pydantic.Field(alias="nodeApprovalMode")
    ] = None
    r"""Device Approval Mode"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[Dict[str, Fields]] = None
    r"""Custom Fields"""

    locations: Optional[List[Locations]] = None
    r"""List of locations"""

    policies: Optional[List[Policies]] = None
    r"""Node role policy assignments"""


class CreateOrganizationRequestTypedDict(TypedDict):
    template_organization_id: NotRequired[int]
    request_body: NotRequired[CreateOrganizationRequestBodyTypedDict]


class CreateOrganizationRequest(BaseModel):
    template_organization_id: Annotated[
        Optional[int],
        pydantic.Field(alias="templateOrganizationId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    request_body: Annotated[
        Optional[CreateOrganizationRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class CreateOrganizationNodeApprovalMode(str, Enum):
    r"""Device Approval Mode"""

    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"
    REJECT = "REJECT"


class CreateOrganizationManagementFieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class CreateOrganizationManagementFields(BaseModel):
    r"""Custom Fields"""


class CreateOrganizationManagementResponseFieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class CreateOrganizationManagementResponseFields(BaseModel):
    r"""Custom Fields"""


class CreateOrganizationLocationsTypedDict(TypedDict):
    r"""Location"""

    name: NotRequired[str]
    r"""Location name"""
    address: NotRequired[str]
    r"""Address"""
    description: NotRequired[str]
    r"""Description"""
    user_data: NotRequired[Dict[str, Any]]
    r"""Custom attributes"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[Dict[str, CreateOrganizationManagementResponseFieldsTypedDict]]
    r"""Custom Fields"""
    id: NotRequired[int]
    r"""Location identifier"""


class CreateOrganizationLocations(BaseModel):
    r"""Location"""

    name: Optional[str] = None
    r"""Location name"""

    address: Optional[str] = None
    r"""Address"""

    description: Optional[str] = None
    r"""Description"""

    user_data: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="userData")] = (
        None
    )
    r"""Custom attributes"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[Dict[str, CreateOrganizationManagementResponseFields]] = None
    r"""Custom Fields"""

    id: Optional[int] = None
    r"""Location identifier"""


class CreateOrganizationPoliciesTypedDict(TypedDict):
    r"""Node role policy assignments"""

    node_role_id: NotRequired[int]
    r"""Node Role Identifier"""
    policy_id: NotRequired[int]
    r"""Policy Identifier"""


class CreateOrganizationPolicies(BaseModel):
    r"""Node role policy assignments"""

    node_role_id: Annotated[Optional[int], pydantic.Field(alias="nodeRoleId")] = None
    r"""Node Role Identifier"""

    policy_id: Annotated[Optional[int], pydantic.Field(alias="policyId")] = None
    r"""Policy Identifier"""


class OptionsTypedDict(TypedDict):
    r"""Feature options"""


class Options(BaseModel):
    r"""Feature options"""


class TrayiconTypedDict(TypedDict):
    r"""Feature/product/integration configuration settings"""

    product: NotRequired[str]
    r"""Configured product code"""
    enabled: NotRequired[bool]
    r"""Is enabled"""
    targets: NotRequired[List[str]]
    r"""Feature deployment targets"""
    options: NotRequired[Dict[str, OptionsTypedDict]]
    r"""Feature options"""


class Trayicon(BaseModel):
    r"""Feature/product/integration configuration settings"""

    product: Optional[str] = None
    r"""Configured product code"""

    enabled: Optional[bool] = None
    r"""Is enabled"""

    targets: Optional[List[str]] = None
    r"""Feature deployment targets"""

    options: Optional[Dict[str, Options]] = None
    r"""Feature options"""


class CreateOrganizationOptionsTypedDict(TypedDict):
    r"""Feature options"""


class CreateOrganizationOptions(BaseModel):
    r"""Feature options"""


class SplashtopTypedDict(TypedDict):
    r"""Feature/product/integration configuration settings"""

    product: NotRequired[str]
    r"""Configured product code"""
    enabled: NotRequired[bool]
    r"""Is enabled"""
    targets: NotRequired[List[str]]
    r"""Feature deployment targets"""
    options: NotRequired[Dict[str, CreateOrganizationOptionsTypedDict]]
    r"""Feature options"""


class Splashtop(BaseModel):
    r"""Feature/product/integration configuration settings"""

    product: Optional[str] = None
    r"""Configured product code"""

    enabled: Optional[bool] = None
    r"""Is enabled"""

    targets: Optional[List[str]] = None
    r"""Feature deployment targets"""

    options: Optional[Dict[str, CreateOrganizationOptions]] = None
    r"""Feature options"""


class CreateOrganizationManagementOptionsTypedDict(TypedDict):
    r"""Feature options"""


class CreateOrganizationManagementOptions(BaseModel):
    r"""Feature options"""


class TeamviewerTypedDict(TypedDict):
    r"""Feature/product/integration configuration settings"""

    product: NotRequired[str]
    r"""Configured product code"""
    enabled: NotRequired[bool]
    r"""Is enabled"""
    targets: NotRequired[List[str]]
    r"""Feature deployment targets"""
    options: NotRequired[Dict[str, CreateOrganizationManagementOptionsTypedDict]]
    r"""Feature options"""


class Teamviewer(BaseModel):
    r"""Feature/product/integration configuration settings"""

    product: Optional[str] = None
    r"""Configured product code"""

    enabled: Optional[bool] = None
    r"""Is enabled"""

    targets: Optional[List[str]] = None
    r"""Feature deployment targets"""

    options: Optional[Dict[str, CreateOrganizationManagementOptions]] = None
    r"""Feature options"""


class CreateOrganizationManagementResponseOptionsTypedDict(TypedDict):
    r"""Feature options"""


class CreateOrganizationManagementResponseOptions(BaseModel):
    r"""Feature options"""


class CreateOrganizationBackupTypedDict(TypedDict):
    r"""Feature/product/integration configuration settings"""

    product: NotRequired[str]
    r"""Configured product code"""
    enabled: NotRequired[bool]
    r"""Is enabled"""
    targets: NotRequired[List[str]]
    r"""Feature deployment targets"""
    options: NotRequired[
        Dict[str, CreateOrganizationManagementResponseOptionsTypedDict]
    ]
    r"""Feature options"""


class CreateOrganizationBackup(BaseModel):
    r"""Feature/product/integration configuration settings"""

    product: Optional[str] = None
    r"""Configured product code"""

    enabled: Optional[bool] = None
    r"""Is enabled"""

    targets: Optional[List[str]] = None
    r"""Feature deployment targets"""

    options: Optional[Dict[str, CreateOrganizationManagementResponseOptions]] = None
    r"""Feature options"""


class CreateOrganizationManagementResponseDefaultOptionsTypedDict(TypedDict):
    r"""Feature options"""


class CreateOrganizationManagementResponseDefaultOptions(BaseModel):
    r"""Feature options"""


class PsaTypedDict(TypedDict):
    r"""Feature/product/integration configuration settings"""

    product: NotRequired[str]
    r"""Configured product code"""
    enabled: NotRequired[bool]
    r"""Is enabled"""
    targets: NotRequired[List[str]]
    r"""Feature deployment targets"""
    options: NotRequired[
        Dict[str, CreateOrganizationManagementResponseDefaultOptionsTypedDict]
    ]
    r"""Feature options"""


class Psa(BaseModel):
    r"""Feature/product/integration configuration settings"""

    product: Optional[str] = None
    r"""Configured product code"""

    enabled: Optional[bool] = None
    r"""Is enabled"""

    targets: Optional[List[str]] = None
    r"""Feature deployment targets"""

    options: Optional[Dict[str, CreateOrganizationManagementResponseDefaultOptions]] = (
        None
    )
    r"""Feature options"""


class SettingsTypedDict(TypedDict):
    r"""Organization settings"""

    trayicon: NotRequired[TrayiconTypedDict]
    r"""Feature/product/integration configuration settings"""
    splashtop: NotRequired[SplashtopTypedDict]
    r"""Feature/product/integration configuration settings"""
    teamviewer: NotRequired[TeamviewerTypedDict]
    r"""Feature/product/integration configuration settings"""
    backup: NotRequired[CreateOrganizationBackupTypedDict]
    r"""Feature/product/integration configuration settings"""
    psa: NotRequired[PsaTypedDict]
    r"""Feature/product/integration configuration settings"""


class Settings(BaseModel):
    r"""Organization settings"""

    trayicon: Optional[Trayicon] = None
    r"""Feature/product/integration configuration settings"""

    splashtop: Optional[Splashtop] = None
    r"""Feature/product/integration configuration settings"""

    teamviewer: Optional[Teamviewer] = None
    r"""Feature/product/integration configuration settings"""

    backup: Optional[CreateOrganizationBackup] = None
    r"""Feature/product/integration configuration settings"""

    psa: Optional[Psa] = None
    r"""Feature/product/integration configuration settings"""


class CreateOrganizationResponseBodyTypedDict(TypedDict):
    r"""default response"""

    name: NotRequired[str]
    r"""Organization full name"""
    description: NotRequired[str]
    r"""Organization Description"""
    user_data: NotRequired[Dict[str, Any]]
    r"""Custom attributes"""
    node_approval_mode: NotRequired[CreateOrganizationNodeApprovalMode]
    r"""Device Approval Mode"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[Dict[str, CreateOrganizationManagementFieldsTypedDict]]
    r"""Custom Fields"""
    id: NotRequired[int]
    r"""Organization identifier"""
    locations: NotRequired[List[CreateOrganizationLocationsTypedDict]]
    r"""List of locations"""
    policies: NotRequired[List[CreateOrganizationPoliciesTypedDict]]
    r"""Node role policy assignments"""
    settings: NotRequired[SettingsTypedDict]
    r"""Organization settings"""


class CreateOrganizationResponseBody(BaseModel):
    r"""default response"""

    name: Optional[str] = None
    r"""Organization full name"""

    description: Optional[str] = None
    r"""Organization Description"""

    user_data: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="userData")] = (
        None
    )
    r"""Custom attributes"""

    node_approval_mode: Annotated[
        Optional[CreateOrganizationNodeApprovalMode],
        pydantic.Field(alias="nodeApprovalMode"),
    ] = None
    r"""Device Approval Mode"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[Dict[str, CreateOrganizationManagementFields]] = None
    r"""Custom Fields"""

    id: Optional[int] = None
    r"""Organization identifier"""

    locations: Optional[List[CreateOrganizationLocations]] = None
    r"""List of locations"""

    policies: Optional[List[CreateOrganizationPolicies]] = None
    r"""Node role policy assignments"""

    settings: Optional[Settings] = None
    r"""Organization settings"""

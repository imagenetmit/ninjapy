"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DescriptionTypedDict(TypedDict):
    r"""Task description"""

    text: NotRequired[str]
    html: NotRequired[str]


class Description(BaseModel):
    r"""Task description"""

    text: Optional[str] = None

    html: Optional[str] = None


class UpdateChecklistTemplatesDescriptionTypedDict(TypedDict):
    r"""Task description"""

    text: NotRequired[str]
    html: NotRequired[str]


class UpdateChecklistTemplatesDescription(BaseModel):
    r"""Task description"""

    text: Optional[str] = None

    html: Optional[str] = None


class TasksTypedDict(TypedDict):
    r"""Checklist's tasks"""

    position: NotRequired[int]
    r"""Position of the task"""
    name: NotRequired[str]
    r"""Task name"""
    description: NotRequired[UpdateChecklistTemplatesDescriptionTypedDict]
    r"""Task description"""


class Tasks(BaseModel):
    r"""Checklist's tasks"""

    position: Optional[int] = None
    r"""Position of the task"""

    name: Optional[str] = None
    r"""Task name"""

    description: Optional[UpdateChecklistTemplatesDescription] = None
    r"""Task description"""


class RequestBodyTypedDict(TypedDict):
    id: NotRequired[int]
    r"""Checklist template identifier"""
    name: NotRequired[str]
    r"""Checklist template name (must be unique)"""
    description: NotRequired[DescriptionTypedDict]
    r"""Task description"""
    tasks: NotRequired[List[TasksTypedDict]]
    r"""Checklist's tasks"""
    required: NotRequired[bool]
    r"""Indicates if the checklist is required"""


class RequestBody(BaseModel):
    id: Optional[int] = None
    r"""Checklist template identifier"""

    name: Optional[str] = None
    r"""Checklist template name (must be unique)"""

    description: Optional[Description] = None
    r"""Task description"""

    tasks: Optional[List[Tasks]] = None
    r"""Checklist's tasks"""

    required: Optional[bool] = None
    r"""Indicates if the checklist is required"""


class UpdateChecklistTemplatesChecklistTemplatesDescriptionTypedDict(TypedDict):
    r"""Task description"""

    text: NotRequired[str]
    html: NotRequired[str]


class UpdateChecklistTemplatesChecklistTemplatesDescription(BaseModel):
    r"""Task description"""

    text: Optional[str] = None

    html: Optional[str] = None


class UpdateChecklistTemplatesChecklistTemplatesResponseDescriptionTypedDict(TypedDict):
    r"""Task description"""

    text: NotRequired[str]
    html: NotRequired[str]


class UpdateChecklistTemplatesChecklistTemplatesResponseDescription(BaseModel):
    r"""Task description"""

    text: Optional[str] = None

    html: Optional[str] = None


class UpdateChecklistTemplatesTasksTypedDict(TypedDict):
    r"""Checklist template tasks"""

    position: NotRequired[int]
    r"""Position of the task"""
    name: NotRequired[str]
    r"""Task name"""
    description: NotRequired[
        UpdateChecklistTemplatesChecklistTemplatesResponseDescriptionTypedDict
    ]
    r"""Task description"""


class UpdateChecklistTemplatesTasks(BaseModel):
    r"""Checklist template tasks"""

    position: Optional[int] = None
    r"""Position of the task"""

    name: Optional[str] = None
    r"""Task name"""

    description: Optional[
        UpdateChecklistTemplatesChecklistTemplatesResponseDescription
    ] = None
    r"""Task description"""


class UpdateChecklistTemplatesLastUpdatedByTypedDict(TypedDict):
    r"""Archive by user"""

    id: NotRequired[int]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    deleted: NotRequired[bool]


class UpdateChecklistTemplatesLastUpdatedBy(BaseModel):
    r"""Archive by user"""

    id: Optional[int] = None

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None

    deleted: Optional[bool] = None


class UpdateChecklistTemplatesArchivedByTypedDict(TypedDict):
    r"""Archive by user"""

    id: NotRequired[int]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    deleted: NotRequired[bool]


class UpdateChecklistTemplatesArchivedBy(BaseModel):
    r"""Archive by user"""

    id: Optional[int] = None

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None

    deleted: Optional[bool] = None


class UpdateChecklistTemplatesResponseBodyTypedDict(TypedDict):
    id: NotRequired[int]
    r"""Identifier"""
    name: NotRequired[str]
    r"""Checklist template name (must be unique)"""
    description: NotRequired[
        UpdateChecklistTemplatesChecklistTemplatesDescriptionTypedDict
    ]
    r"""Task description"""
    tasks: NotRequired[List[UpdateChecklistTemplatesTasksTypedDict]]
    r"""Checklist template tasks"""
    required: NotRequired[bool]
    r"""Indicates if the checklist completion is required"""
    last_updated_on: NotRequired[float]
    r"""Last updated on"""
    last_updated_by: NotRequired[UpdateChecklistTemplatesLastUpdatedByTypedDict]
    r"""Archive by user"""
    archived: NotRequired[bool]
    r"""Indicates if the checklist template is archived"""
    archived_by: NotRequired[UpdateChecklistTemplatesArchivedByTypedDict]
    r"""Archive by user"""
    archive_time: NotRequired[float]
    r"""Archive time"""


class UpdateChecklistTemplatesResponseBody(BaseModel):
    id: Optional[int] = None
    r"""Identifier"""

    name: Optional[str] = None
    r"""Checklist template name (must be unique)"""

    description: Optional[UpdateChecklistTemplatesChecklistTemplatesDescription] = None
    r"""Task description"""

    tasks: Optional[List[UpdateChecklistTemplatesTasks]] = None
    r"""Checklist template tasks"""

    required: Optional[bool] = None
    r"""Indicates if the checklist completion is required"""

    last_updated_on: Annotated[
        Optional[float], pydantic.Field(alias="lastUpdatedOn")
    ] = None
    r"""Last updated on"""

    last_updated_by: Annotated[
        Optional[UpdateChecklistTemplatesLastUpdatedBy],
        pydantic.Field(alias="lastUpdatedBy"),
    ] = None
    r"""Archive by user"""

    archived: Optional[bool] = None
    r"""Indicates if the checklist template is archived"""

    archived_by: Annotated[
        Optional[UpdateChecklistTemplatesArchivedBy], pydantic.Field(alias="archivedBy")
    ] = None
    r"""Archive by user"""

    archive_time: Annotated[Optional[float], pydantic.Field(alias="archiveTime")] = None
    r"""Archive time"""

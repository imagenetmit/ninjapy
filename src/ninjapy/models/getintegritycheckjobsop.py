"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetIntegrityCheckJobsRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter."""
    ddf: NotRequired[str]
    r"""Deleted device filter."""
    sf: NotRequired[str]
    r"""Backup job status filter."""
    ptf: NotRequired[str]
    r"""Backup job planType filter."""
    stf: NotRequired[str]
    r"""Backup job startTime filter."""
    include: NotRequired[str]
    r"""Which devices include (active|deleted|all) default value active."""
    cursor: NotRequired[str]
    r"""Cursor name."""
    page_size: NotRequired[int]
    r"""Limit number of records per page."""


class GetIntegrityCheckJobsRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter."""

    ddf: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Deleted device filter."""

    sf: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Backup job status filter."""

    ptf: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Backup job planType filter."""

    stf: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Backup job startTime filter."""

    include: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "active"
    r"""Which devices include (active|deleted|all) default value active."""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name."""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10000
    r"""Limit number of records per page."""


class CursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class Cursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class ResultsTypedDict(TypedDict):
    job_id: NotRequired[str]
    r"""Job id"""
    job_start_time: NotRequired[float]
    r"""Job start time"""
    job_end_time: NotRequired[float]
    r"""Job end time"""
    job_status: NotRequired[str]
    r"""Job status"""
    plan_guid: NotRequired[str]
    r"""Plan id"""
    plan_name: NotRequired[str]
    r"""Plan name"""
    plan_type: NotRequired[str]
    r"""Plan type"""
    total_actual_storage_bytes: NotRequired[int]
    r"""Total bytes"""
    organization_id: NotRequired[int]
    r"""Organization id"""
    location_id: NotRequired[int]
    r"""Location id"""
    device_id: NotRequired[int]
    r"""Device id"""


class Results(BaseModel):
    job_id: Annotated[Optional[str], pydantic.Field(alias="jobId")] = None
    r"""Job id"""

    job_start_time: Annotated[Optional[float], pydantic.Field(alias="jobStartTime")] = (
        None
    )
    r"""Job start time"""

    job_end_time: Annotated[Optional[float], pydantic.Field(alias="jobEndTime")] = None
    r"""Job end time"""

    job_status: Annotated[Optional[str], pydantic.Field(alias="jobStatus")] = None
    r"""Job status"""

    plan_guid: Annotated[Optional[str], pydantic.Field(alias="planGuid")] = None
    r"""Plan id"""

    plan_name: Annotated[Optional[str], pydantic.Field(alias="planName")] = None
    r"""Plan name"""

    plan_type: Annotated[Optional[str], pydantic.Field(alias="planType")] = None
    r"""Plan type"""

    total_actual_storage_bytes: Annotated[
        Optional[int], pydantic.Field(alias="totalActualStorageBytes")
    ] = None
    r"""Total bytes"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization id"""

    location_id: Annotated[Optional[int], pydantic.Field(alias="locationId")] = None
    r"""Location id"""

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device id"""


class GetIntegrityCheckJobsResponseBodyTypedDict(TypedDict):
    r"""The integrity check job report."""

    cursor: NotRequired[CursorTypedDict]
    results: NotRequired[List[ResultsTypedDict]]


class GetIntegrityCheckJobsResponseBody(BaseModel):
    r"""The integrity check job report."""

    cursor: Optional[Cursor] = None

    results: Optional[List[Results]] = None

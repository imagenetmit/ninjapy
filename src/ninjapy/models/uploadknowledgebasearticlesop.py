"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .bodypart import BodyPart, BodyPartTypedDict
from .multipart import MultiPart, MultiPartTypedDict
from datetime import datetime
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, MultipartFormMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UploadKnowledgeBaseArticlesContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]


class UploadKnowledgeBaseArticlesContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None


class UploadKnowledgeBaseArticlesEntityTypedDict(TypedDict):
    pass


class UploadKnowledgeBaseArticlesEntity(BaseModel):
    pass


class UploadKnowledgeBaseArticlesMediaTypeTypedDict(TypedDict):
    type: NotRequired[str]
    subtype: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    wildcard_type: NotRequired[bool]
    wildcard_subtype: NotRequired[bool]


class UploadKnowledgeBaseArticlesMediaType(BaseModel):
    type: Optional[str] = None

    subtype: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    wildcard_type: Annotated[Optional[bool], pydantic.Field(alias="wildcardType")] = (
        None
    )

    wildcard_subtype: Annotated[
        Optional[bool], pydantic.Field(alias="wildcardSubtype")
    ] = None


class UploadKnowledgeBaseArticlesMessageBodyWorkersTypedDict(TypedDict):
    pass


class UploadKnowledgeBaseArticlesMessageBodyWorkers(BaseModel):
    pass


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesContentDispositionTypedDict(
    TypedDict
):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesEntityTypedDict(TypedDict):
    pass


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesEntity(BaseModel):
    pass


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesMediaTypeTypedDict(TypedDict):
    type: NotRequired[str]
    subtype: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    wildcard_type: NotRequired[bool]
    wildcard_subtype: NotRequired[bool]


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesMediaType(BaseModel):
    type: Optional[str] = None

    subtype: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    wildcard_type: Annotated[Optional[bool], pydantic.Field(alias="wildcardType")] = (
        None
    )

    wildcard_subtype: Annotated[
        Optional[bool], pydantic.Field(alias="wildcardSubtype")
    ] = None


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesMessageBodyWorkersTypedDict(
    TypedDict
):
    pass


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesMessageBodyWorkers(BaseModel):
    pass


class UploadKnowledgeBaseArticlesProvidersTypedDict(TypedDict):
    pass


class UploadKnowledgeBaseArticlesProviders(BaseModel):
    pass


class UploadKnowledgeBaseArticlesParameterizedHeadersTypedDict(TypedDict):
    value: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]


class UploadKnowledgeBaseArticlesParameterizedHeaders(BaseModel):
    value: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None


class UploadKnowledgeBaseArticlesParentTypedDict(TypedDict):
    content_disposition: NotRequired[
        UploadKnowledgeBaseArticlesKnowledgeBaseArticlesContentDispositionTypedDict
    ]
    entity: NotRequired[UploadKnowledgeBaseArticlesKnowledgeBaseArticlesEntityTypedDict]
    headers: NotRequired[Dict[str, List[str]]]
    media_type: NotRequired[
        UploadKnowledgeBaseArticlesKnowledgeBaseArticlesMediaTypeTypedDict
    ]
    message_body_workers: NotRequired[
        UploadKnowledgeBaseArticlesKnowledgeBaseArticlesMessageBodyWorkersTypedDict
    ]
    parent: NotRequired[MultiPartTypedDict]
    providers: NotRequired[UploadKnowledgeBaseArticlesProvidersTypedDict]
    body_parts: NotRequired[List[BodyPartTypedDict]]
    parameterized_headers: NotRequired[
        Dict[str, List[UploadKnowledgeBaseArticlesParameterizedHeadersTypedDict]]
    ]


class UploadKnowledgeBaseArticlesParent(BaseModel):
    content_disposition: Annotated[
        Optional[UploadKnowledgeBaseArticlesKnowledgeBaseArticlesContentDisposition],
        pydantic.Field(alias="contentDisposition"),
    ] = None

    entity: Optional[UploadKnowledgeBaseArticlesKnowledgeBaseArticlesEntity] = None

    headers: Optional[Dict[str, List[str]]] = None

    media_type: Annotated[
        Optional[UploadKnowledgeBaseArticlesKnowledgeBaseArticlesMediaType],
        pydantic.Field(alias="mediaType"),
    ] = None

    message_body_workers: Annotated[
        Optional[UploadKnowledgeBaseArticlesKnowledgeBaseArticlesMessageBodyWorkers],
        pydantic.Field(alias="messageBodyWorkers"),
    ] = None

    parent: Optional[MultiPart] = None

    providers: Optional[UploadKnowledgeBaseArticlesProviders] = None

    body_parts: Annotated[
        Optional[List[BodyPart]], pydantic.Field(alias="bodyParts")
    ] = None

    parameterized_headers: Annotated[
        Optional[Dict[str, List[UploadKnowledgeBaseArticlesParameterizedHeaders]]],
        pydantic.Field(alias="parameterizedHeaders"),
    ] = None


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesProvidersTypedDict(TypedDict):
    pass


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesProviders(BaseModel):
    pass


class UploadKnowledgeBaseArticlesFormDataContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]
    name: NotRequired[str]


class UploadKnowledgeBaseArticlesFormDataContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None

    name: Optional[str] = None


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesParameterizedHeadersTypedDict(
    TypedDict
):
    value: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]


class UploadKnowledgeBaseArticlesKnowledgeBaseArticlesParameterizedHeaders(BaseModel):
    value: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None


class UploadKnowledgeBaseArticlesFilesTypedDict(TypedDict):
    content_disposition: NotRequired[
        UploadKnowledgeBaseArticlesContentDispositionTypedDict
    ]
    entity: NotRequired[UploadKnowledgeBaseArticlesEntityTypedDict]
    headers: NotRequired[Dict[str, List[str]]]
    media_type: NotRequired[UploadKnowledgeBaseArticlesMediaTypeTypedDict]
    message_body_workers: NotRequired[
        UploadKnowledgeBaseArticlesMessageBodyWorkersTypedDict
    ]
    parent: NotRequired[UploadKnowledgeBaseArticlesParentTypedDict]
    providers: NotRequired[
        UploadKnowledgeBaseArticlesKnowledgeBaseArticlesProvidersTypedDict
    ]
    simple: NotRequired[bool]
    form_data_content_disposition: NotRequired[
        UploadKnowledgeBaseArticlesFormDataContentDispositionTypedDict
    ]
    name: NotRequired[str]
    value: NotRequired[str]
    parameterized_headers: NotRequired[
        Dict[
            str,
            List[
                UploadKnowledgeBaseArticlesKnowledgeBaseArticlesParameterizedHeadersTypedDict
            ],
        ]
    ]


class UploadKnowledgeBaseArticlesFiles(BaseModel):
    content_disposition: Annotated[
        Optional[UploadKnowledgeBaseArticlesContentDisposition],
        pydantic.Field(alias="contentDisposition"),
    ] = None

    entity: Optional[UploadKnowledgeBaseArticlesEntity] = None

    headers: Optional[Dict[str, List[str]]] = None

    media_type: Annotated[
        Optional[UploadKnowledgeBaseArticlesMediaType],
        pydantic.Field(alias="mediaType"),
    ] = None

    message_body_workers: Annotated[
        Optional[UploadKnowledgeBaseArticlesMessageBodyWorkers],
        pydantic.Field(alias="messageBodyWorkers"),
    ] = None

    parent: Optional[UploadKnowledgeBaseArticlesParent] = None

    providers: Optional[UploadKnowledgeBaseArticlesKnowledgeBaseArticlesProviders] = (
        None
    )

    simple: Optional[bool] = None

    form_data_content_disposition: Annotated[
        Optional[UploadKnowledgeBaseArticlesFormDataContentDisposition],
        pydantic.Field(alias="formDataContentDisposition"),
    ] = None

    name: Optional[str] = None

    value: Optional[str] = None

    parameterized_headers: Annotated[
        Optional[
            Dict[
                str,
                List[
                    UploadKnowledgeBaseArticlesKnowledgeBaseArticlesParameterizedHeaders
                ],
            ]
        ],
        pydantic.Field(alias="parameterizedHeaders"),
    ] = None


class UploadKnowledgeBaseArticlesRequestBodyTypedDict(TypedDict):
    organization_id: NotRequired[int]
    folder_id: NotRequired[int]
    folder_path: NotRequired[str]
    files: NotRequired[List[UploadKnowledgeBaseArticlesFilesTypedDict]]


class UploadKnowledgeBaseArticlesRequestBody(BaseModel):
    organization_id: Annotated[
        Optional[int],
        pydantic.Field(alias="organizationId"),
        FieldMetadata(multipart=True),
    ] = None

    folder_id: Annotated[
        Optional[int], pydantic.Field(alias="folderId"), FieldMetadata(multipart=True)
    ] = None

    folder_path: Annotated[
        Optional[str], pydantic.Field(alias="folderPath"), FieldMetadata(multipart=True)
    ] = None

    files: Annotated[
        Optional[List[UploadKnowledgeBaseArticlesFiles]],
        FieldMetadata(multipart=MultipartFormMetadata(json=True)),
    ] = None


class UploadKnowledgeBaseArticlesUploadStatus(str, Enum):
    r"""Upload status"""

    PROCESSING = "PROCESSING"
    SUCCESS = "SUCCESS"
    FAILURE = "FAILURE"
    SUSPICIOUS = "SUSPICIOUS"


class UploadKnowledgeBaseArticlesMetadataTypedDict(TypedDict):
    r"""Attachment metadata"""

    name: NotRequired[str]
    mime_type: NotRequired[str]
    size: NotRequired[str]
    extension: NotRequired[str]
    content_id: NotRequired[str]
    inline: NotRequired[bool]


class UploadKnowledgeBaseArticlesMetadata(BaseModel):
    r"""Attachment metadata"""

    name: Optional[str] = None

    mime_type: Annotated[Optional[str], pydantic.Field(alias="mimeType")] = None

    size: Optional[str] = None

    extension: Optional[str] = None

    content_id: Annotated[Optional[str], pydantic.Field(alias="contentId")] = None

    inline: Optional[bool] = None


class UploadKnowledgeBaseArticlesAttachmentsTypedDict(TypedDict):
    r"""Lists the files associated with the article"""

    id: NotRequired[int]
    r"""Identifier"""
    upload_status: NotRequired[UploadKnowledgeBaseArticlesUploadStatus]
    r"""Upload status"""
    metadata: NotRequired[UploadKnowledgeBaseArticlesMetadataTypedDict]
    r"""Attachment metadata"""


class UploadKnowledgeBaseArticlesAttachments(BaseModel):
    r"""Lists the files associated with the article"""

    id: Optional[int] = None
    r"""Identifier"""

    upload_status: Annotated[
        Optional[UploadKnowledgeBaseArticlesUploadStatus],
        pydantic.Field(alias="uploadStatus"),
    ] = None
    r"""Upload status"""

    metadata: Optional[UploadKnowledgeBaseArticlesMetadata] = None
    r"""Attachment metadata"""


class UploadKnowledgeBaseArticlesContentTypedDict(TypedDict):
    r"""Article content"""

    html: NotRequired[str]
    r"""Article content html"""
    text: NotRequired[str]
    r"""Article content text"""


class UploadKnowledgeBaseArticlesContent(BaseModel):
    r"""Article content"""

    html: Optional[str] = None
    r"""Article content html"""

    text: Optional[str] = None
    r"""Article content text"""


class UploadKnowledgeBaseArticlesResponseBodyTypedDict(TypedDict):
    id: NotRequired[int]
    r"""Identifier"""
    organization_id: NotRequired[int]
    r"""Organization identifier"""
    parent_folder_id: NotRequired[int]
    r"""Parent folder identifier"""
    name: NotRequired[str]
    r"""Article name"""
    is_ninja_article: NotRequired[bool]
    r"""Indicates if the article was created in ninja"""
    is_archived: NotRequired[bool]
    r"""Indicates if the article is archived"""
    attachments: NotRequired[List[UploadKnowledgeBaseArticlesAttachmentsTypedDict]]
    r"""Lists the files associated with the article"""
    content: NotRequired[UploadKnowledgeBaseArticlesContentTypedDict]
    r"""Article content"""
    create_time: NotRequired[float]
    r"""Article created time"""
    update_time: NotRequired[float]
    r"""Article last updated time"""
    archived_time: NotRequired[float]
    r"""Article archived time"""
    path: NotRequired[str]
    r"""Article path"""


class UploadKnowledgeBaseArticlesResponseBody(BaseModel):
    id: Optional[int] = None
    r"""Identifier"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization identifier"""

    parent_folder_id: Annotated[
        Optional[int], pydantic.Field(alias="parentFolderId")
    ] = None
    r"""Parent folder identifier"""

    name: Optional[str] = None
    r"""Article name"""

    is_ninja_article: Annotated[
        Optional[bool], pydantic.Field(alias="isNinjaArticle")
    ] = None
    r"""Indicates if the article was created in ninja"""

    is_archived: Annotated[Optional[bool], pydantic.Field(alias="isArchived")] = None
    r"""Indicates if the article is archived"""

    attachments: Optional[List[UploadKnowledgeBaseArticlesAttachments]] = None
    r"""Lists the files associated with the article"""

    content: Optional[UploadKnowledgeBaseArticlesContent] = None
    r"""Article content"""

    create_time: Annotated[Optional[float], pydantic.Field(alias="createTime")] = None
    r"""Article created time"""

    update_time: Annotated[Optional[float], pydantic.Field(alias="updateTime")] = None
    r"""Article last updated time"""

    archived_time: Annotated[Optional[float], pydantic.Field(alias="archivedTime")] = (
        None
    )
    r"""Article archived time"""

    path: Optional[str] = None
    r"""Article path"""

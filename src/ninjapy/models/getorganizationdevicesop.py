"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetOrganizationDevicesRequestTypedDict(TypedDict):
    id: int
    r"""Organization identifier"""
    page_size: NotRequired[int]
    r"""Limit number of devices to return"""
    after: NotRequired[int]
    r"""Last Node ID from previous page"""


class GetOrganizationDevicesRequest(BaseModel):
    id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Organization identifier"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit number of devices to return"""

    after: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Last Node ID from previous page"""


class GetOrganizationDevicesNodeClass(str, Enum):
    r"""Node Class"""

    WINDOWS_SERVER = "WINDOWS_SERVER"
    WINDOWS_WORKSTATION = "WINDOWS_WORKSTATION"
    LINUX_WORKSTATION = "LINUX_WORKSTATION"
    MAC = "MAC"
    ANDROID = "ANDROID"
    APPLE_IOS = "APPLE_IOS"
    APPLE_IPADOS = "APPLE_IPADOS"
    VMWARE_VM_HOST = "VMWARE_VM_HOST"
    VMWARE_VM_GUEST = "VMWARE_VM_GUEST"
    HYPERV_VMM_HOST = "HYPERV_VMM_HOST"
    HYPERV_VMM_GUEST = "HYPERV_VMM_GUEST"
    LINUX_SERVER = "LINUX_SERVER"
    MAC_SERVER = "MAC_SERVER"
    CLOUD_MONITOR_TARGET = "CLOUD_MONITOR_TARGET"
    NMS_SWITCH = "NMS_SWITCH"
    NMS_ROUTER = "NMS_ROUTER"
    NMS_FIREWALL = "NMS_FIREWALL"
    NMS_PRIVATE_NETWORK_GATEWAY = "NMS_PRIVATE_NETWORK_GATEWAY"
    NMS_PRINTER = "NMS_PRINTER"
    NMS_SCANNER = "NMS_SCANNER"
    NMS_DIAL_MANAGER = "NMS_DIAL_MANAGER"
    NMS_WAP = "NMS_WAP"
    NMS_IPSLA = "NMS_IPSLA"
    NMS_COMPUTER = "NMS_COMPUTER"
    NMS_VM_HOST = "NMS_VM_HOST"
    NMS_APPLIANCE = "NMS_APPLIANCE"
    NMS_OTHER = "NMS_OTHER"
    NMS_SERVER = "NMS_SERVER"
    NMS_PHONE = "NMS_PHONE"
    NMS_VIRTUAL_MACHINE = "NMS_VIRTUAL_MACHINE"
    NMS_NETWORK_MANAGEMENT_AGENT = "NMS_NETWORK_MANAGEMENT_AGENT"


class GetOrganizationDevicesApprovalStatus(str, Enum):
    r"""Approval Status"""

    PENDING = "PENDING"
    APPROVED = "APPROVED"


class GetOrganizationDevicesFieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class GetOrganizationDevicesFields(BaseModel):
    r"""Custom Fields"""


class GetOrganizationDevicesStatus(str, Enum):
    r"""Maintenance mode status"""

    PENDING = "PENDING"
    IN_MAINTENANCE = "IN_MAINTENANCE"
    FAILED = "FAILED"


class GetOrganizationDevicesMaintenanceTypedDict(TypedDict):
    r"""Maintenance mode status"""

    status: NotRequired[GetOrganizationDevicesStatus]
    r"""Maintenance mode status"""
    start: NotRequired[float]
    r"""Maintenance mode start time"""
    end: NotRequired[float]
    r"""Maintenance mode end time"""


class GetOrganizationDevicesMaintenance(BaseModel):
    r"""Maintenance mode status"""

    status: Optional[GetOrganizationDevicesStatus] = None
    r"""Maintenance mode status"""

    start: Optional[float] = None
    r"""Maintenance mode start time"""

    end: Optional[float] = None
    r"""Maintenance mode end time"""


class GetOrganizationDevicesNodeApprovalMode(str, Enum):
    r"""Device Approval Mode"""

    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"
    REJECT = "REJECT"


class GetOrganizationDevicesOrganizationFieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class GetOrganizationDevicesOrganizationFields(BaseModel):
    r"""Custom Fields"""


class GetOrganizationDevicesOrganizationTypedDict(TypedDict):
    r"""Organization"""

    name: NotRequired[str]
    r"""Organization full name"""
    description: NotRequired[str]
    r"""Organization Description"""
    user_data: NotRequired[Dict[str, Any]]
    r"""Custom attributes"""
    node_approval_mode: NotRequired[GetOrganizationDevicesNodeApprovalMode]
    r"""Device Approval Mode"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[Dict[str, GetOrganizationDevicesOrganizationFieldsTypedDict]]
    r"""Custom Fields"""
    id: NotRequired[int]
    r"""Organization identifier"""


class GetOrganizationDevicesOrganization(BaseModel):
    r"""Organization"""

    name: Optional[str] = None
    r"""Organization full name"""

    description: Optional[str] = None
    r"""Organization Description"""

    user_data: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="userData")] = (
        None
    )
    r"""Custom attributes"""

    node_approval_mode: Annotated[
        Optional[GetOrganizationDevicesNodeApprovalMode],
        pydantic.Field(alias="nodeApprovalMode"),
    ] = None
    r"""Device Approval Mode"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[Dict[str, GetOrganizationDevicesOrganizationFields]] = None
    r"""Custom Fields"""

    id: Optional[int] = None
    r"""Organization identifier"""


class GetOrganizationDevicesOrganizationResponseFieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class GetOrganizationDevicesOrganizationResponseFields(BaseModel):
    r"""Custom Fields"""


class GetOrganizationDevicesLocationTypedDict(TypedDict):
    r"""Location"""

    name: NotRequired[str]
    r"""Location name"""
    address: NotRequired[str]
    r"""Address"""
    description: NotRequired[str]
    r"""Description"""
    user_data: NotRequired[Dict[str, Any]]
    r"""Custom attributes"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[
        Dict[str, GetOrganizationDevicesOrganizationResponseFieldsTypedDict]
    ]
    r"""Custom Fields"""
    id: NotRequired[int]
    r"""Location identifier"""


class GetOrganizationDevicesLocation(BaseModel):
    r"""Location"""

    name: Optional[str] = None
    r"""Location name"""

    address: Optional[str] = None
    r"""Address"""

    description: Optional[str] = None
    r"""Description"""

    user_data: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="userData")] = (
        None
    )
    r"""Custom attributes"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[Dict[str, GetOrganizationDevicesOrganizationResponseFields]] = None
    r"""Custom Fields"""

    id: Optional[int] = None
    r"""Location identifier"""


class GetOrganizationDevicesOrganizationNodeClass(str, Enum):
    r"""Node Class"""

    WINDOWS_SERVER = "WINDOWS_SERVER"
    WINDOWS_WORKSTATION = "WINDOWS_WORKSTATION"
    LINUX_WORKSTATION = "LINUX_WORKSTATION"
    MAC = "MAC"
    ANDROID = "ANDROID"
    APPLE_IOS = "APPLE_IOS"
    APPLE_IPADOS = "APPLE_IPADOS"
    VMWARE_VM_HOST = "VMWARE_VM_HOST"
    VMWARE_VM_GUEST = "VMWARE_VM_GUEST"
    HYPERV_VMM_HOST = "HYPERV_VMM_HOST"
    HYPERV_VMM_GUEST = "HYPERV_VMM_GUEST"
    LINUX_SERVER = "LINUX_SERVER"
    MAC_SERVER = "MAC_SERVER"
    CLOUD_MONITOR_TARGET = "CLOUD_MONITOR_TARGET"
    NMS_SWITCH = "NMS_SWITCH"
    NMS_ROUTER = "NMS_ROUTER"
    NMS_FIREWALL = "NMS_FIREWALL"
    NMS_PRIVATE_NETWORK_GATEWAY = "NMS_PRIVATE_NETWORK_GATEWAY"
    NMS_PRINTER = "NMS_PRINTER"
    NMS_SCANNER = "NMS_SCANNER"
    NMS_DIAL_MANAGER = "NMS_DIAL_MANAGER"
    NMS_WAP = "NMS_WAP"
    NMS_IPSLA = "NMS_IPSLA"
    NMS_COMPUTER = "NMS_COMPUTER"
    NMS_VM_HOST = "NMS_VM_HOST"
    NMS_APPLIANCE = "NMS_APPLIANCE"
    NMS_OTHER = "NMS_OTHER"
    NMS_SERVER = "NMS_SERVER"
    NMS_PHONE = "NMS_PHONE"
    NMS_VIRTUAL_MACHINE = "NMS_VIRTUAL_MACHINE"
    NMS_NETWORK_MANAGEMENT_AGENT = "NMS_NETWORK_MANAGEMENT_AGENT"


class GetOrganizationDevicesOrganizationResponseDefaultFieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class GetOrganizationDevicesOrganizationResponseDefaultFields(BaseModel):
    r"""Custom Fields"""


class GetOrganizationDevicesRolePolicyTypedDict(TypedDict):
    r"""Assigned policy (overrides organization and location policy mapping)"""

    id: NotRequired[int]
    r"""Policy identifier"""
    parent_policy_id: NotRequired[int]
    r"""Parent Policy identifier"""
    name: NotRequired[str]
    r"""Name"""
    description: NotRequired[str]
    r"""Description"""
    node_class: NotRequired[GetOrganizationDevicesOrganizationNodeClass]
    r"""Node Class"""
    updated: NotRequired[float]
    r"""Last update timestamp"""
    node_class_default: NotRequired[bool]
    r"""Is Default Policy for Node Class"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[
        Dict[str, GetOrganizationDevicesOrganizationResponseDefaultFieldsTypedDict]
    ]
    r"""Custom Fields"""


class GetOrganizationDevicesRolePolicy(BaseModel):
    r"""Assigned policy (overrides organization and location policy mapping)"""

    id: Optional[int] = None
    r"""Policy identifier"""

    parent_policy_id: Annotated[
        Optional[int], pydantic.Field(alias="parentPolicyId")
    ] = None
    r"""Parent Policy identifier"""

    name: Optional[str] = None
    r"""Name"""

    description: Optional[str] = None
    r"""Description"""

    node_class: Annotated[
        Optional[GetOrganizationDevicesOrganizationNodeClass],
        pydantic.Field(alias="nodeClass"),
    ] = None
    r"""Node Class"""

    updated: Optional[float] = None
    r"""Last update timestamp"""

    node_class_default: Annotated[
        Optional[bool], pydantic.Field(alias="nodeClassDefault")
    ] = None
    r"""Is Default Policy for Node Class"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[
        Dict[str, GetOrganizationDevicesOrganizationResponseDefaultFields]
    ] = None
    r"""Custom Fields"""


class GetOrganizationDevicesOrganizationResponseNodeClass(str, Enum):
    r"""Node Class"""

    WINDOWS_SERVER = "WINDOWS_SERVER"
    WINDOWS_WORKSTATION = "WINDOWS_WORKSTATION"
    LINUX_WORKSTATION = "LINUX_WORKSTATION"
    MAC = "MAC"
    ANDROID = "ANDROID"
    APPLE_IOS = "APPLE_IOS"
    APPLE_IPADOS = "APPLE_IPADOS"
    VMWARE_VM_HOST = "VMWARE_VM_HOST"
    VMWARE_VM_GUEST = "VMWARE_VM_GUEST"
    HYPERV_VMM_HOST = "HYPERV_VMM_HOST"
    HYPERV_VMM_GUEST = "HYPERV_VMM_GUEST"
    LINUX_SERVER = "LINUX_SERVER"
    MAC_SERVER = "MAC_SERVER"
    CLOUD_MONITOR_TARGET = "CLOUD_MONITOR_TARGET"
    NMS_SWITCH = "NMS_SWITCH"
    NMS_ROUTER = "NMS_ROUTER"
    NMS_FIREWALL = "NMS_FIREWALL"
    NMS_PRIVATE_NETWORK_GATEWAY = "NMS_PRIVATE_NETWORK_GATEWAY"
    NMS_PRINTER = "NMS_PRINTER"
    NMS_SCANNER = "NMS_SCANNER"
    NMS_DIAL_MANAGER = "NMS_DIAL_MANAGER"
    NMS_WAP = "NMS_WAP"
    NMS_IPSLA = "NMS_IPSLA"
    NMS_COMPUTER = "NMS_COMPUTER"
    NMS_VM_HOST = "NMS_VM_HOST"
    NMS_APPLIANCE = "NMS_APPLIANCE"
    NMS_OTHER = "NMS_OTHER"
    NMS_SERVER = "NMS_SERVER"
    NMS_PHONE = "NMS_PHONE"
    NMS_VIRTUAL_MACHINE = "NMS_VIRTUAL_MACHINE"
    NMS_NETWORK_MANAGEMENT_AGENT = "NMS_NETWORK_MANAGEMENT_AGENT"


class GetOrganizationDevicesOrganizationResponseDefaultApplicationJSONFieldsTypedDict(
    TypedDict
):
    r"""Custom Fields"""


class GetOrganizationDevicesOrganizationResponseDefaultApplicationJSONFields(BaseModel):
    r"""Custom Fields"""


class GetOrganizationDevicesPolicyTypedDict(TypedDict):
    r"""Assigned policy (overrides organization and location policy mapping)"""

    id: NotRequired[int]
    r"""Policy identifier"""
    parent_policy_id: NotRequired[int]
    r"""Parent Policy identifier"""
    name: NotRequired[str]
    r"""Name"""
    description: NotRequired[str]
    r"""Description"""
    node_class: NotRequired[GetOrganizationDevicesOrganizationResponseNodeClass]
    r"""Node Class"""
    updated: NotRequired[float]
    r"""Last update timestamp"""
    node_class_default: NotRequired[bool]
    r"""Is Default Policy for Node Class"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[
        Dict[
            str,
            GetOrganizationDevicesOrganizationResponseDefaultApplicationJSONFieldsTypedDict,
        ]
    ]
    r"""Custom Fields"""


class GetOrganizationDevicesPolicy(BaseModel):
    r"""Assigned policy (overrides organization and location policy mapping)"""

    id: Optional[int] = None
    r"""Policy identifier"""

    parent_policy_id: Annotated[
        Optional[int], pydantic.Field(alias="parentPolicyId")
    ] = None
    r"""Parent Policy identifier"""

    name: Optional[str] = None
    r"""Name"""

    description: Optional[str] = None
    r"""Description"""

    node_class: Annotated[
        Optional[GetOrganizationDevicesOrganizationResponseNodeClass],
        pydantic.Field(alias="nodeClass"),
    ] = None
    r"""Node Class"""

    updated: Optional[float] = None
    r"""Last update timestamp"""

    node_class_default: Annotated[
        Optional[bool], pydantic.Field(alias="nodeClassDefault")
    ] = None
    r"""Is Default Policy for Node Class"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[
        Dict[
            str, GetOrganizationDevicesOrganizationResponseDefaultApplicationJSONFields
        ]
    ] = None
    r"""Custom Fields"""


class GetOrganizationDevicesOrganizationResponseDefaultNodeClass(str, Enum):
    r"""Node Class"""

    WINDOWS_SERVER = "WINDOWS_SERVER"
    WINDOWS_WORKSTATION = "WINDOWS_WORKSTATION"
    LINUX_WORKSTATION = "LINUX_WORKSTATION"
    MAC = "MAC"
    ANDROID = "ANDROID"
    APPLE_IOS = "APPLE_IOS"
    APPLE_IPADOS = "APPLE_IPADOS"
    VMWARE_VM_HOST = "VMWARE_VM_HOST"
    VMWARE_VM_GUEST = "VMWARE_VM_GUEST"
    HYPERV_VMM_HOST = "HYPERV_VMM_HOST"
    HYPERV_VMM_GUEST = "HYPERV_VMM_GUEST"
    LINUX_SERVER = "LINUX_SERVER"
    MAC_SERVER = "MAC_SERVER"
    CLOUD_MONITOR_TARGET = "CLOUD_MONITOR_TARGET"
    NMS_SWITCH = "NMS_SWITCH"
    NMS_ROUTER = "NMS_ROUTER"
    NMS_FIREWALL = "NMS_FIREWALL"
    NMS_PRIVATE_NETWORK_GATEWAY = "NMS_PRIVATE_NETWORK_GATEWAY"
    NMS_PRINTER = "NMS_PRINTER"
    NMS_SCANNER = "NMS_SCANNER"
    NMS_DIAL_MANAGER = "NMS_DIAL_MANAGER"
    NMS_WAP = "NMS_WAP"
    NMS_IPSLA = "NMS_IPSLA"
    NMS_COMPUTER = "NMS_COMPUTER"
    NMS_VM_HOST = "NMS_VM_HOST"
    NMS_APPLIANCE = "NMS_APPLIANCE"
    NMS_OTHER = "NMS_OTHER"
    NMS_SERVER = "NMS_SERVER"
    NMS_PHONE = "NMS_PHONE"
    NMS_VIRTUAL_MACHINE = "NMS_VIRTUAL_MACHINE"
    NMS_NETWORK_MANAGEMENT_AGENT = "NMS_NETWORK_MANAGEMENT_AGENT"


class GetOrganizationDevicesChassisType(str, Enum):
    r"""Chassis Type"""

    UNKNOWN = "UNKNOWN"
    DESKTOP = "DESKTOP"
    LAPTOP = "LAPTOP"
    MOBILE = "MOBILE"


class GetOrganizationDevicesOrganizationResponseDefaultApplicationJSONResponseBodyFieldsTypedDict(
    TypedDict
):
    r"""Custom Fields"""


class GetOrganizationDevicesOrganizationResponseDefaultApplicationJSONResponseBodyFields(
    BaseModel
):
    r"""Custom Fields"""


class GetOrganizationDevicesRoleTypedDict(TypedDict):
    r"""Device Role"""

    id: NotRequired[int]
    r"""Device Role identifier"""
    name: NotRequired[str]
    r"""Name"""
    description: NotRequired[str]
    r"""Description"""
    node_class: NotRequired[GetOrganizationDevicesOrganizationResponseDefaultNodeClass]
    r"""Node Class"""
    custom: NotRequired[bool]
    r"""Is custom node role?"""
    chassis_type: NotRequired[GetOrganizationDevicesChassisType]
    r"""Chassis Type"""
    created: NotRequired[float]
    r"""Date created"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[
        Dict[
            str,
            GetOrganizationDevicesOrganizationResponseDefaultApplicationJSONResponseBodyFieldsTypedDict,
        ]
    ]
    r"""Custom Fields"""


class GetOrganizationDevicesRole(BaseModel):
    r"""Device Role"""

    id: Optional[int] = None
    r"""Device Role identifier"""

    name: Optional[str] = None
    r"""Name"""

    description: Optional[str] = None
    r"""Description"""

    node_class: Annotated[
        Optional[GetOrganizationDevicesOrganizationResponseDefaultNodeClass],
        pydantic.Field(alias="nodeClass"),
    ] = None
    r"""Node Class"""

    custom: Optional[bool] = None
    r"""Is custom node role?"""

    chassis_type: Annotated[
        Optional[GetOrganizationDevicesChassisType], pydantic.Field(alias="chassisType")
    ] = None
    r"""Chassis Type"""

    created: Optional[float] = None
    r"""Date created"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[
        Dict[
            str,
            GetOrganizationDevicesOrganizationResponseDefaultApplicationJSONResponseBodyFields,
        ]
    ] = None
    r"""Custom Fields"""


class GetOrganizationDevicesBackupUsageTypedDict(TypedDict):
    r"""Device Backup Usage"""

    revisions_current_size: NotRequired[int]
    r"""Revisions current size"""
    revisions_previous_size: NotRequired[int]
    r"""Revisions previous size"""
    revisions_deleted_size: NotRequired[int]
    r"""Revisions deleted size"""
    local_file_folder_size: NotRequired[int]
    r"""Revisions local file folder size"""
    local_image_size: NotRequired[int]
    r"""Revisions local image size"""
    local_image_v2_size: NotRequired[int]
    r"""Revisions local image v2 size"""
    cloud_file_folder_size: NotRequired[int]
    r"""Revisions cloud file folder size"""
    cloud_image_size: NotRequired[int]
    r"""Revisions cloud image size"""
    cloud_image_v2_size: NotRequired[int]
    r"""Revisions cloud image v2 size"""
    last_successful_backup_job: NotRequired[float]
    r"""Last successful job. This is provided when the 'includeLastBackupJobTimes' query parameter is set to 'true'"""
    last_failed_backup_job: NotRequired[float]
    r"""Last failed job. This is provided when the 'includeLastBackupJobTimes' query parameter is set to 'true'"""
    revisions_total_size: NotRequired[int]
    r"""Revisions total size"""
    cloud_total_size: NotRequired[int]
    r"""Revisions cloud total size"""
    local_total_size: NotRequired[int]
    r"""Revisions local total size"""


class GetOrganizationDevicesBackupUsage(BaseModel):
    r"""Device Backup Usage"""

    revisions_current_size: Annotated[
        Optional[int], pydantic.Field(alias="revisionsCurrentSize")
    ] = None
    r"""Revisions current size"""

    revisions_previous_size: Annotated[
        Optional[int], pydantic.Field(alias="revisionsPreviousSize")
    ] = None
    r"""Revisions previous size"""

    revisions_deleted_size: Annotated[
        Optional[int], pydantic.Field(alias="revisionsDeletedSize")
    ] = None
    r"""Revisions deleted size"""

    local_file_folder_size: Annotated[
        Optional[int], pydantic.Field(alias="localFileFolderSize")
    ] = None
    r"""Revisions local file folder size"""

    local_image_size: Annotated[
        Optional[int], pydantic.Field(alias="localImageSize")
    ] = None
    r"""Revisions local image size"""

    local_image_v2_size: Annotated[
        Optional[int], pydantic.Field(alias="localImageV2Size")
    ] = None
    r"""Revisions local image v2 size"""

    cloud_file_folder_size: Annotated[
        Optional[int], pydantic.Field(alias="cloudFileFolderSize")
    ] = None
    r"""Revisions cloud file folder size"""

    cloud_image_size: Annotated[
        Optional[int], pydantic.Field(alias="cloudImageSize")
    ] = None
    r"""Revisions cloud image size"""

    cloud_image_v2_size: Annotated[
        Optional[int], pydantic.Field(alias="cloudImageV2Size")
    ] = None
    r"""Revisions cloud image v2 size"""

    last_successful_backup_job: Annotated[
        Optional[float], pydantic.Field(alias="lastSuccessfulBackupJob")
    ] = None
    r"""Last successful job. This is provided when the 'includeLastBackupJobTimes' query parameter is set to 'true'"""

    last_failed_backup_job: Annotated[
        Optional[float], pydantic.Field(alias="lastFailedBackupJob")
    ] = None
    r"""Last failed job. This is provided when the 'includeLastBackupJobTimes' query parameter is set to 'true'"""

    revisions_total_size: Annotated[
        Optional[int], pydantic.Field(alias="revisionsTotalSize")
    ] = None
    r"""Revisions total size"""

    cloud_total_size: Annotated[
        Optional[int], pydantic.Field(alias="cloudTotalSize")
    ] = None
    r"""Revisions cloud total size"""

    local_total_size: Annotated[
        Optional[int], pydantic.Field(alias="localTotalSize")
    ] = None
    r"""Revisions local total size"""


class GetOrganizationDevicesWarrantyTypedDict(TypedDict):
    r"""Warranty Info"""

    start_date: NotRequired[float]
    r"""Warranty Start Date (Seconds)"""
    end_date: NotRequired[float]
    r"""Warranty End Date (Seconds)"""
    manufacturer_fulfillment_date: NotRequired[float]
    r"""Manufacturer Fulfillment Date"""


class GetOrganizationDevicesWarranty(BaseModel):
    r"""Warranty Info"""

    start_date: Annotated[Optional[float], pydantic.Field(alias="startDate")] = None
    r"""Warranty Start Date (Seconds)"""

    end_date: Annotated[Optional[float], pydantic.Field(alias="endDate")] = None
    r"""Warranty End Date (Seconds)"""

    manufacturer_fulfillment_date: Annotated[
        Optional[float], pydantic.Field(alias="manufacturerFulfillmentDate")
    ] = None
    r"""Manufacturer Fulfillment Date"""


class GetOrganizationDevicesReferencesTypedDict(TypedDict):
    r"""Expanded entity references"""

    organization: NotRequired[GetOrganizationDevicesOrganizationTypedDict]
    r"""Organization"""
    location: NotRequired[GetOrganizationDevicesLocationTypedDict]
    r"""Location"""
    role_policy: NotRequired[GetOrganizationDevicesRolePolicyTypedDict]
    r"""Assigned policy (overrides organization and location policy mapping)"""
    policy: NotRequired[GetOrganizationDevicesPolicyTypedDict]
    r"""Assigned policy (overrides organization and location policy mapping)"""
    role: NotRequired[GetOrganizationDevicesRoleTypedDict]
    r"""Device Role"""
    backup_usage: NotRequired[GetOrganizationDevicesBackupUsageTypedDict]
    r"""Device Backup Usage"""
    warranty: NotRequired[GetOrganizationDevicesWarrantyTypedDict]
    r"""Warranty Info"""


class GetOrganizationDevicesReferences(BaseModel):
    r"""Expanded entity references"""

    organization: Optional[GetOrganizationDevicesOrganization] = None
    r"""Organization"""

    location: Optional[GetOrganizationDevicesLocation] = None
    r"""Location"""

    role_policy: Annotated[
        Optional[GetOrganizationDevicesRolePolicy], pydantic.Field(alias="rolePolicy")
    ] = None
    r"""Assigned policy (overrides organization and location policy mapping)"""

    policy: Optional[GetOrganizationDevicesPolicy] = None
    r"""Assigned policy (overrides organization and location policy mapping)"""

    role: Optional[GetOrganizationDevicesRole] = None
    r"""Device Role"""

    backup_usage: Annotated[
        Optional[GetOrganizationDevicesBackupUsage], pydantic.Field(alias="backupUsage")
    ] = None
    r"""Device Backup Usage"""

    warranty: Optional[GetOrganizationDevicesWarranty] = None
    r"""Warranty Info"""


class GetOrganizationDevicesResponseBodyTypedDict(TypedDict):
    r"""Device information."""

    id: NotRequired[int]
    r"""Node (Device) identifier"""
    parent_device_id: NotRequired[int]
    r"""Parent Node identifier"""
    organization_id: NotRequired[int]
    r"""Organization identifier"""
    location_id: NotRequired[int]
    r"""Location identifier"""
    node_class: NotRequired[GetOrganizationDevicesNodeClass]
    r"""Node Class"""
    node_role_id: NotRequired[int]
    r"""Node Role identifier"""
    role_policy_id: NotRequired[int]
    r"""Node Role policy ID based on organization and location Policy Mapping"""
    policy_id: NotRequired[int]
    r"""Assigned policy ID (overrides organization and location policy mapping)"""
    approval_status: NotRequired[GetOrganizationDevicesApprovalStatus]
    r"""Approval Status"""
    offline: NotRequired[bool]
    r"""Is Offline?"""
    display_name: NotRequired[str]
    r"""Display Name"""
    system_name: NotRequired[str]
    r"""System Name"""
    dns_name: NotRequired[str]
    r"""DNS Name"""
    netbios_name: NotRequired[str]
    r"""NETBIOS Name"""
    created: NotRequired[float]
    r"""Created"""
    last_contact: NotRequired[float]
    r"""Last Contact"""
    last_update: NotRequired[float]
    r"""Last data submission timestamp"""
    user_data: NotRequired[Dict[str, Any]]
    r"""Custom attributes"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[Dict[str, GetOrganizationDevicesFieldsTypedDict]]
    r"""Custom Fields"""
    maintenance: NotRequired[GetOrganizationDevicesMaintenanceTypedDict]
    r"""Maintenance mode status"""
    references: NotRequired[GetOrganizationDevicesReferencesTypedDict]
    r"""Expanded entity references"""


class GetOrganizationDevicesResponseBody(BaseModel):
    r"""Device information."""

    id: Optional[int] = None
    r"""Node (Device) identifier"""

    parent_device_id: Annotated[
        Optional[int], pydantic.Field(alias="parentDeviceId")
    ] = None
    r"""Parent Node identifier"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization identifier"""

    location_id: Annotated[Optional[int], pydantic.Field(alias="locationId")] = None
    r"""Location identifier"""

    node_class: Annotated[
        Optional[GetOrganizationDevicesNodeClass], pydantic.Field(alias="nodeClass")
    ] = None
    r"""Node Class"""

    node_role_id: Annotated[Optional[int], pydantic.Field(alias="nodeRoleId")] = None
    r"""Node Role identifier"""

    role_policy_id: Annotated[Optional[int], pydantic.Field(alias="rolePolicyId")] = (
        None
    )
    r"""Node Role policy ID based on organization and location Policy Mapping"""

    policy_id: Annotated[Optional[int], pydantic.Field(alias="policyId")] = None
    r"""Assigned policy ID (overrides organization and location policy mapping)"""

    approval_status: Annotated[
        Optional[GetOrganizationDevicesApprovalStatus],
        pydantic.Field(alias="approvalStatus"),
    ] = None
    r"""Approval Status"""

    offline: Optional[bool] = None
    r"""Is Offline?"""

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""Display Name"""

    system_name: Annotated[Optional[str], pydantic.Field(alias="systemName")] = None
    r"""System Name"""

    dns_name: Annotated[Optional[str], pydantic.Field(alias="dnsName")] = None
    r"""DNS Name"""

    netbios_name: Annotated[Optional[str], pydantic.Field(alias="netbiosName")] = None
    r"""NETBIOS Name"""

    created: Optional[float] = None
    r"""Created"""

    last_contact: Annotated[Optional[float], pydantic.Field(alias="lastContact")] = None
    r"""Last Contact"""

    last_update: Annotated[Optional[float], pydantic.Field(alias="lastUpdate")] = None
    r"""Last data submission timestamp"""

    user_data: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="userData")] = (
        None
    )
    r"""Custom attributes"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[Dict[str, GetOrganizationDevicesFields]] = None
    r"""Custom Fields"""

    maintenance: Optional[GetOrganizationDevicesMaintenance] = None
    r"""Maintenance mode status"""

    references: Optional[GetOrganizationDevicesReferences] = None
    r"""Expanded entity references"""

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetKnowledgeBaseFolderContentRequestTypedDict(TypedDict):
    folder_id: int
    include_archived: NotRequired[bool]


class GetKnowledgeBaseFolderContentRequest(BaseModel):
    folder_id: Annotated[
        int,
        pydantic.Field(alias="folderId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    include_archived: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeArchived"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class FileUploadStatus(str, Enum):
    r"""Article file upload status (Only for uploaded knowledge base articles)"""

    PROCESSING = "PROCESSING"
    SUCCESS = "SUCCESS"
    FAILURE = "FAILURE"
    SUSPICIOUS = "SUSPICIOUS"


class GetKnowledgeBaseFolderContentContentTypedDict(TypedDict):
    r"""Folder content"""

    archived: NotRequired[bool]
    folder: NotRequired[bool]
    id: NotRequired[int]
    r"""Identifier"""
    organization_id: NotRequired[int]
    r"""Organization identifier"""
    parent_folder_id: NotRequired[int]
    r"""Parent folder identifier"""
    is_folder: NotRequired[bool]
    r"""Indicates if this item is a folder"""
    is_archived: NotRequired[bool]
    r"""Indicates if this item is archived"""
    name: NotRequired[str]
    r"""Article name (In the case of uploaded articles this will be the file name)"""
    file_size: NotRequired[str]
    r"""Article file size (Only for uploaded knowledge base articles)"""
    file_extension: NotRequired[str]
    r"""Article file extension (For native kb articles the extension will be 'ninja')"""
    file_upload_status: NotRequired[FileUploadStatus]
    r"""Article file upload status (Only for uploaded knowledge base articles)"""
    create_time: NotRequired[float]
    r"""Item created time"""
    update_time: NotRequired[float]
    r"""Item last updated time"""


class GetKnowledgeBaseFolderContentContent(BaseModel):
    r"""Folder content"""

    archived: Optional[bool] = None

    folder: Optional[bool] = None

    id: Optional[int] = None
    r"""Identifier"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization identifier"""

    parent_folder_id: Annotated[
        Optional[int], pydantic.Field(alias="parentFolderId")
    ] = None
    r"""Parent folder identifier"""

    is_folder: Annotated[Optional[bool], pydantic.Field(alias="isFolder")] = None
    r"""Indicates if this item is a folder"""

    is_archived: Annotated[Optional[bool], pydantic.Field(alias="isArchived")] = None
    r"""Indicates if this item is archived"""

    name: Optional[str] = None
    r"""Article name (In the case of uploaded articles this will be the file name)"""

    file_size: Annotated[Optional[str], pydantic.Field(alias="fileSize")] = None
    r"""Article file size (Only for uploaded knowledge base articles)"""

    file_extension: Annotated[Optional[str], pydantic.Field(alias="fileExtension")] = (
        None
    )
    r"""Article file extension (For native kb articles the extension will be 'ninja')"""

    file_upload_status: Annotated[
        Optional[FileUploadStatus], pydantic.Field(alias="fileUploadStatus")
    ] = None
    r"""Article file upload status (Only for uploaded knowledge base articles)"""

    create_time: Annotated[Optional[float], pydantic.Field(alias="createTime")] = None
    r"""Item created time"""

    update_time: Annotated[Optional[float], pydantic.Field(alias="updateTime")] = None
    r"""Item last updated time"""


class GetKnowledgeBaseFolderContentResponseBodyTypedDict(TypedDict):
    r"""Returns knowledge base folder and its content"""

    id: NotRequired[int]
    r"""Identifier"""
    organization_id: NotRequired[int]
    r"""Organization identifier"""
    parent_folder_id: NotRequired[int]
    r"""Parent folder identifier"""
    name: NotRequired[str]
    r"""Article name"""
    is_archived: NotRequired[bool]
    r"""Indicates if the article is archived"""
    create_time: NotRequired[float]
    r"""Folder created time"""
    update_time: NotRequired[float]
    r"""Folder last updated time"""
    archived_time: NotRequired[float]
    r"""Folder archived time"""
    content: NotRequired[List[GetKnowledgeBaseFolderContentContentTypedDict]]
    r"""Folder content"""


class GetKnowledgeBaseFolderContentResponseBody(BaseModel):
    r"""Returns knowledge base folder and its content"""

    id: Optional[int] = None
    r"""Identifier"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization identifier"""

    parent_folder_id: Annotated[
        Optional[int], pydantic.Field(alias="parentFolderId")
    ] = None
    r"""Parent folder identifier"""

    name: Optional[str] = None
    r"""Article name"""

    is_archived: Annotated[Optional[bool], pydantic.Field(alias="isArchived")] = None
    r"""Indicates if the article is archived"""

    create_time: Annotated[Optional[float], pydantic.Field(alias="createTime")] = None
    r"""Folder created time"""

    update_time: Annotated[Optional[float], pydantic.Field(alias="updateTime")] = None
    r"""Folder last updated time"""

    archived_time: Annotated[Optional[float], pydantic.Field(alias="archivedTime")] = (
        None
    )
    r"""Folder archived time"""

    content: Optional[List[GetKnowledgeBaseFolderContentContent]] = None
    r"""Folder content"""

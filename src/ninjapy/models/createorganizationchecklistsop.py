"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateOrganizationChecklistsDescriptionTypedDict(TypedDict):
    r"""Task description"""

    text: NotRequired[str]
    html: NotRequired[str]


class CreateOrganizationChecklistsDescription(BaseModel):
    r"""Task description"""

    text: Optional[str] = None

    html: Optional[str] = None


class CreateOrganizationChecklistsOrganizationChecklistsDescriptionTypedDict(TypedDict):
    r"""Task description"""

    text: NotRequired[str]
    html: NotRequired[str]


class CreateOrganizationChecklistsOrganizationChecklistsDescription(BaseModel):
    r"""Task description"""

    text: Optional[str] = None

    html: Optional[str] = None


class CreateOrganizationChecklistsTasksTypedDict(TypedDict):
    r"""Checklist tasks"""

    id: NotRequired[int]
    r"""Identifier"""
    position: NotRequired[int]
    r"""Position of the task"""
    name: NotRequired[str]
    r"""Task name"""
    description: NotRequired[
        CreateOrganizationChecklistsOrganizationChecklistsDescriptionTypedDict
    ]
    r"""Task description"""
    assigned_to_user_id: NotRequired[int]
    r"""User identifier assigned to the checklist task"""
    due_date: NotRequired[float]
    r"""Due date"""
    completed: NotRequired[bool]
    r"""Indicates if the checklist is completed"""


class CreateOrganizationChecklistsTasks(BaseModel):
    r"""Checklist tasks"""

    id: Optional[int] = None
    r"""Identifier"""

    position: Optional[int] = None
    r"""Position of the task"""

    name: Optional[str] = None
    r"""Task name"""

    description: Optional[
        CreateOrganizationChecklistsOrganizationChecklistsDescription
    ] = None
    r"""Task description"""

    assigned_to_user_id: Annotated[
        Optional[int], pydantic.Field(alias="assignedToUserId")
    ] = None
    r"""User identifier assigned to the checklist task"""

    due_date: Annotated[Optional[float], pydantic.Field(alias="dueDate")] = None
    r"""Due date"""

    completed: Optional[bool] = None
    r"""Indicates if the checklist is completed"""


class CreateOrganizationChecklistsRequestBodyTypedDict(TypedDict):
    name: NotRequired[str]
    r"""Checklist name"""
    description: NotRequired[CreateOrganizationChecklistsDescriptionTypedDict]
    r"""Task description"""
    required: NotRequired[bool]
    r"""Indicates if the checklist completion is required"""
    due_date: NotRequired[float]
    r"""Due date"""
    assigned_to_user_id: NotRequired[int]
    r"""User identifier assigned to the checklist"""
    organization_id: NotRequired[int]
    r"""Organization identifier"""
    checklist_template_id: NotRequired[int]
    r"""Checklist template identifier"""
    tasks: NotRequired[List[CreateOrganizationChecklistsTasksTypedDict]]
    r"""Checklist tasks"""


class CreateOrganizationChecklistsRequestBody(BaseModel):
    name: Optional[str] = None
    r"""Checklist name"""

    description: Optional[CreateOrganizationChecklistsDescription] = None
    r"""Task description"""

    required: Optional[bool] = None
    r"""Indicates if the checklist completion is required"""

    due_date: Annotated[Optional[float], pydantic.Field(alias="dueDate")] = None
    r"""Due date"""

    assigned_to_user_id: Annotated[
        Optional[int], pydantic.Field(alias="assignedToUserId")
    ] = None
    r"""User identifier assigned to the checklist"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization identifier"""

    checklist_template_id: Annotated[
        Optional[int], pydantic.Field(alias="checklistTemplateId")
    ] = None
    r"""Checklist template identifier"""

    tasks: Optional[List[CreateOrganizationChecklistsTasks]] = None
    r"""Checklist tasks"""


class CreateOrganizationChecklistsOrganizationChecklistsResponseDescriptionTypedDict(
    TypedDict
):
    r"""Task description"""

    text: NotRequired[str]
    html: NotRequired[str]


class CreateOrganizationChecklistsOrganizationChecklistsResponseDescription(BaseModel):
    r"""Task description"""

    text: Optional[str] = None

    html: Optional[str] = None


class CreateOrganizationChecklistsAssignedToTypedDict(TypedDict):
    r"""Archive by user"""

    id: NotRequired[int]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    deleted: NotRequired[bool]


class CreateOrganizationChecklistsAssignedTo(BaseModel):
    r"""Archive by user"""

    id: Optional[int] = None

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None

    deleted: Optional[bool] = None


class CreateOrganizationChecklistsLastUpdatedByTypedDict(TypedDict):
    r"""Archive by user"""

    id: NotRequired[int]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    deleted: NotRequired[bool]


class CreateOrganizationChecklistsLastUpdatedBy(BaseModel):
    r"""Archive by user"""

    id: Optional[int] = None

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None

    deleted: Optional[bool] = None


class CreateOrganizationChecklistsOrganizationChecklistsResponse200DescriptionTypedDict(
    TypedDict
):
    r"""Task description"""

    text: NotRequired[str]
    html: NotRequired[str]


class CreateOrganizationChecklistsOrganizationChecklistsResponse200Description(
    BaseModel
):
    r"""Task description"""

    text: Optional[str] = None

    html: Optional[str] = None


class CreateOrganizationChecklistsOrganizationChecklistsAssignedToTypedDict(TypedDict):
    r"""Archive by user"""

    id: NotRequired[int]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    deleted: NotRequired[bool]


class CreateOrganizationChecklistsOrganizationChecklistsAssignedTo(BaseModel):
    r"""Archive by user"""

    id: Optional[int] = None

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None

    deleted: Optional[bool] = None


class CreateOrganizationChecklistsCompletedByTypedDict(TypedDict):
    r"""Archive by user"""

    id: NotRequired[int]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    deleted: NotRequired[bool]


class CreateOrganizationChecklistsCompletedBy(BaseModel):
    r"""Archive by user"""

    id: Optional[int] = None

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None

    deleted: Optional[bool] = None


class CreateOrganizationChecklistsOrganizationChecklistsTasksTypedDict(TypedDict):
    r"""Checklist's tasks"""

    id: NotRequired[int]
    r"""Identifier"""
    position: NotRequired[int]
    r"""Position of the task"""
    name: NotRequired[str]
    r"""Task name"""
    description: NotRequired[
        CreateOrganizationChecklistsOrganizationChecklistsResponse200DescriptionTypedDict
    ]
    r"""Task description"""
    assigned_to: NotRequired[
        CreateOrganizationChecklistsOrganizationChecklistsAssignedToTypedDict
    ]
    r"""Archive by user"""
    due_date: NotRequired[float]
    r"""Due date"""
    completed: NotRequired[bool]
    r"""Indicates if the checklist is completed"""
    completed_on: NotRequired[float]
    r"""Date of completion"""
    completed_by: NotRequired[CreateOrganizationChecklistsCompletedByTypedDict]
    r"""Archive by user"""


class CreateOrganizationChecklistsOrganizationChecklistsTasks(BaseModel):
    r"""Checklist's tasks"""

    id: Optional[int] = None
    r"""Identifier"""

    position: Optional[int] = None
    r"""Position of the task"""

    name: Optional[str] = None
    r"""Task name"""

    description: Optional[
        CreateOrganizationChecklistsOrganizationChecklistsResponse200Description
    ] = None
    r"""Task description"""

    assigned_to: Annotated[
        Optional[CreateOrganizationChecklistsOrganizationChecklistsAssignedTo],
        pydantic.Field(alias="assignedTo"),
    ] = None
    r"""Archive by user"""

    due_date: Annotated[Optional[float], pydantic.Field(alias="dueDate")] = None
    r"""Due date"""

    completed: Optional[bool] = None
    r"""Indicates if the checklist is completed"""

    completed_on: Annotated[Optional[float], pydantic.Field(alias="completedOn")] = None
    r"""Date of completion"""

    completed_by: Annotated[
        Optional[CreateOrganizationChecklistsCompletedBy],
        pydantic.Field(alias="completedBy"),
    ] = None
    r"""Archive by user"""


class CreateOrganizationChecklistsArchivedByTypedDict(TypedDict):
    r"""Archive by user"""

    id: NotRequired[int]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    deleted: NotRequired[bool]


class CreateOrganizationChecklistsArchivedBy(BaseModel):
    r"""Archive by user"""

    id: Optional[int] = None

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None

    deleted: Optional[bool] = None


class CreateOrganizationChecklistsResponseBodyTypedDict(TypedDict):
    id: NotRequired[int]
    r"""Identifier"""
    name: NotRequired[str]
    r"""Checklist name (must be unique)"""
    description: NotRequired[
        CreateOrganizationChecklistsOrganizationChecklistsResponseDescriptionTypedDict
    ]
    r"""Task description"""
    required: NotRequired[bool]
    r"""Indicates if the checklist completion is required"""
    due_date: NotRequired[float]
    r"""Due date"""
    completed: NotRequired[bool]
    r"""Indicates if the checklist is completed"""
    completed_on: NotRequired[float]
    r"""Date of completion"""
    assigned_to: NotRequired[CreateOrganizationChecklistsAssignedToTypedDict]
    r"""Archive by user"""
    last_updated_on: NotRequired[float]
    r"""Last updated on"""
    last_updated_by: NotRequired[CreateOrganizationChecklistsLastUpdatedByTypedDict]
    r"""Archive by user"""
    completed_task_count: NotRequired[int]
    r"""Last updated by user"""
    total_task_count: NotRequired[int]
    r"""Checklist's total tasks count"""
    tasks: NotRequired[
        List[CreateOrganizationChecklistsOrganizationChecklistsTasksTypedDict]
    ]
    r"""Checklist's tasks"""
    organization_id: NotRequired[int]
    r"""Organization identifier"""
    client_name: NotRequired[str]
    r"""Client name"""
    archived: NotRequired[bool]
    r"""Indicates if the checklist is archived"""
    archived_by: NotRequired[CreateOrganizationChecklistsArchivedByTypedDict]
    r"""Archive by user"""
    archive_time: NotRequired[float]
    r"""Archive time"""


class CreateOrganizationChecklistsResponseBody(BaseModel):
    id: Optional[int] = None
    r"""Identifier"""

    name: Optional[str] = None
    r"""Checklist name (must be unique)"""

    description: Optional[
        CreateOrganizationChecklistsOrganizationChecklistsResponseDescription
    ] = None
    r"""Task description"""

    required: Optional[bool] = None
    r"""Indicates if the checklist completion is required"""

    due_date: Annotated[Optional[float], pydantic.Field(alias="dueDate")] = None
    r"""Due date"""

    completed: Optional[bool] = None
    r"""Indicates if the checklist is completed"""

    completed_on: Annotated[Optional[float], pydantic.Field(alias="completedOn")] = None
    r"""Date of completion"""

    assigned_to: Annotated[
        Optional[CreateOrganizationChecklistsAssignedTo],
        pydantic.Field(alias="assignedTo"),
    ] = None
    r"""Archive by user"""

    last_updated_on: Annotated[
        Optional[float], pydantic.Field(alias="lastUpdatedOn")
    ] = None
    r"""Last updated on"""

    last_updated_by: Annotated[
        Optional[CreateOrganizationChecklistsLastUpdatedBy],
        pydantic.Field(alias="lastUpdatedBy"),
    ] = None
    r"""Archive by user"""

    completed_task_count: Annotated[
        Optional[int], pydantic.Field(alias="completedTaskCount")
    ] = None
    r"""Last updated by user"""

    total_task_count: Annotated[
        Optional[int], pydantic.Field(alias="totalTaskCount")
    ] = None
    r"""Checklist's total tasks count"""

    tasks: Optional[List[CreateOrganizationChecklistsOrganizationChecklistsTasks]] = (
        None
    )
    r"""Checklist's tasks"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization identifier"""

    client_name: Annotated[Optional[str], pydantic.Field(alias="clientName")] = None
    r"""Client name"""

    archived: Optional[bool] = None
    r"""Indicates if the checklist is archived"""

    archived_by: Annotated[
        Optional[CreateOrganizationChecklistsArchivedBy],
        pydantic.Field(alias="archivedBy"),
    ] = None
    r"""Archive by user"""

    archive_time: Annotated[Optional[float], pydantic.Field(alias="archiveTime")] = None
    r"""Archive time"""

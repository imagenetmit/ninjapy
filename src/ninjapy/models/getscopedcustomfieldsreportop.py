"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetScopedCustomFieldsReportRequestTypedDict(TypedDict):
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]
    r"""Limit number of records per page"""
    updated_after: NotRequired[str]
    r"""Custom fields updated after specified date"""
    fields: NotRequired[str]
    r"""Comma-separated list of fields"""
    scopes: NotRequired[str]
    r"""Comma-separated list of scopes"""
    show_secure_values: NotRequired[bool]
    r"""Flag to indicate if secure values should be returned as plain text without encryption"""


class GetScopedCustomFieldsReportRequest(BaseModel):
    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1000
    r"""Limit number of records per page"""

    updated_after: Annotated[
        Optional[str],
        pydantic.Field(alias="updatedAfter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Custom fields updated after specified date"""

    fields: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Comma-separated list of fields"""

    scopes: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "all"
    r"""Comma-separated list of scopes"""

    show_secure_values: Annotated[
        Optional[bool],
        pydantic.Field(alias="showSecureValues"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Flag to indicate if secure values should be returned as plain text without encryption"""


class GetScopedCustomFieldsReportCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetScopedCustomFieldsReportCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class GetScopedCustomFieldsReportScope(str, Enum):
    r"""Value definition scope (entity type)"""

    NODE = "NODE"
    LOCATION = "LOCATION"
    ORGANIZATION = "ORGANIZATION"


class GetScopedCustomFieldsReportFieldsTypedDict(TypedDict):
    r"""Field values"""


class GetScopedCustomFieldsReportFields(BaseModel):
    r"""Field values"""


class GetScopedCustomFieldsReportResultsTypedDict(TypedDict):
    scope: NotRequired[GetScopedCustomFieldsReportScope]
    r"""Value definition scope (entity type)"""
    entity_id: NotRequired[int]
    r"""Entity identifier (device, organization, location)"""
    fields: NotRequired[Dict[str, GetScopedCustomFieldsReportFieldsTypedDict]]
    r"""Field values"""


class GetScopedCustomFieldsReportResults(BaseModel):
    scope: Optional[GetScopedCustomFieldsReportScope] = None
    r"""Value definition scope (entity type)"""

    entity_id: Annotated[Optional[int], pydantic.Field(alias="entityId")] = None
    r"""Entity identifier (device, organization, location)"""

    fields: Optional[Dict[str, GetScopedCustomFieldsReportFields]] = None
    r"""Field values"""


class GetScopedCustomFieldsReportResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetScopedCustomFieldsReportCursorTypedDict]
    results: NotRequired[List[GetScopedCustomFieldsReportResultsTypedDict]]


class GetScopedCustomFieldsReportResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetScopedCustomFieldsReportCursor] = None

    results: Optional[List[GetScopedCustomFieldsReportResults]] = None

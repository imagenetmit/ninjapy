"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetAntivirusStatusReportRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter"""
    ts: NotRequired[str]
    r"""Monitoring timestamp filter"""
    product_state: NotRequired[str]
    r"""Product State filter"""
    product_name: NotRequired[str]
    r"""Product Name filter"""
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]
    r"""Limit number of records per page"""


class GetAntivirusStatusReportRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter"""

    ts: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Monitoring timestamp filter"""

    product_state: Annotated[
        Optional[str],
        pydantic.Field(alias="productState"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Product State filter"""

    product_name: Annotated[
        Optional[str],
        pydantic.Field(alias="productName"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Product Name filter"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit number of records per page"""


class GetAntivirusStatusReportCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetAntivirusStatusReportCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class GetAntivirusStatusReportResultsTypedDict(TypedDict):
    product_name: NotRequired[str]
    r"""Product name"""
    product_state: NotRequired[str]
    r"""Product state"""
    definition_status: NotRequired[str]
    r"""Definition Status"""
    version: NotRequired[str]
    r"""Product Version"""
    device_id: NotRequired[int]
    r"""Device identifier"""
    timestamp: NotRequired[float]
    r"""Date/Time when data was collected/updated"""


class GetAntivirusStatusReportResults(BaseModel):
    product_name: Annotated[Optional[str], pydantic.Field(alias="productName")] = None
    r"""Product name"""

    product_state: Annotated[Optional[str], pydantic.Field(alias="productState")] = None
    r"""Product state"""

    definition_status: Annotated[
        Optional[str], pydantic.Field(alias="definitionStatus")
    ] = None
    r"""Definition Status"""

    version: Optional[str] = None
    r"""Product Version"""

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device identifier"""

    timestamp: Optional[float] = None
    r"""Date/Time when data was collected/updated"""


class GetAntivirusStatusReportResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetAntivirusStatusReportCursorTypedDict]
    results: NotRequired[List[GetAntivirusStatusReportResultsTypedDict]]


class GetAntivirusStatusReportResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetAntivirusStatusReportCursor] = None

    results: Optional[List[GetAntivirusStatusReportResults]] = None

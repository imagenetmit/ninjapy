"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .bodypart import BodyPart, BodyPartTypedDict
from .multipart import MultiPart, MultiPartTypedDict
from datetime import datetime
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import (
    FieldMetadata,
    MultipartFormMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EntityType(str, Enum):
    TICKET = "TICKET"
    NODE = "NODE"
    DOCUMENT = "DOCUMENT"
    RELATED_ITEM = "RELATED_ITEM"
    CHECKLIST = "CHECKLIST"
    AUTOMATION = "AUTOMATION"
    LOCATION = "LOCATION"
    ORGANIZATION = "ORGANIZATION"


class UploadTempAttachmentsContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]


class UploadTempAttachmentsContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None


class UploadTempAttachmentsEntityTypedDict(TypedDict):
    pass


class UploadTempAttachmentsEntity(BaseModel):
    pass


class UploadTempAttachmentsMediaTypeTypedDict(TypedDict):
    type: NotRequired[str]
    subtype: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    wildcard_type: NotRequired[bool]
    wildcard_subtype: NotRequired[bool]


class UploadTempAttachmentsMediaType(BaseModel):
    type: Optional[str] = None

    subtype: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    wildcard_type: Annotated[Optional[bool], pydantic.Field(alias="wildcardType")] = (
        None
    )

    wildcard_subtype: Annotated[
        Optional[bool], pydantic.Field(alias="wildcardSubtype")
    ] = None


class UploadTempAttachmentsMessageBodyWorkersTypedDict(TypedDict):
    pass


class UploadTempAttachmentsMessageBodyWorkers(BaseModel):
    pass


class UploadTempAttachmentsKnowledgeBaseArticlesContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]


class UploadTempAttachmentsKnowledgeBaseArticlesContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None


class UploadTempAttachmentsKnowledgeBaseArticlesEntityTypedDict(TypedDict):
    pass


class UploadTempAttachmentsKnowledgeBaseArticlesEntity(BaseModel):
    pass


class UploadTempAttachmentsKnowledgeBaseArticlesMediaTypeTypedDict(TypedDict):
    type: NotRequired[str]
    subtype: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    wildcard_type: NotRequired[bool]
    wildcard_subtype: NotRequired[bool]


class UploadTempAttachmentsKnowledgeBaseArticlesMediaType(BaseModel):
    type: Optional[str] = None

    subtype: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    wildcard_type: Annotated[Optional[bool], pydantic.Field(alias="wildcardType")] = (
        None
    )

    wildcard_subtype: Annotated[
        Optional[bool], pydantic.Field(alias="wildcardSubtype")
    ] = None


class UploadTempAttachmentsKnowledgeBaseArticlesMessageBodyWorkersTypedDict(TypedDict):
    pass


class UploadTempAttachmentsKnowledgeBaseArticlesMessageBodyWorkers(BaseModel):
    pass


class UploadTempAttachmentsProvidersTypedDict(TypedDict):
    pass


class UploadTempAttachmentsProviders(BaseModel):
    pass


class UploadTempAttachmentsParameterizedHeadersTypedDict(TypedDict):
    value: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]


class UploadTempAttachmentsParameterizedHeaders(BaseModel):
    value: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None


class ParentTypedDict(TypedDict):
    content_disposition: NotRequired[
        UploadTempAttachmentsKnowledgeBaseArticlesContentDispositionTypedDict
    ]
    entity: NotRequired[UploadTempAttachmentsKnowledgeBaseArticlesEntityTypedDict]
    headers: NotRequired[Dict[str, List[str]]]
    media_type: NotRequired[
        UploadTempAttachmentsKnowledgeBaseArticlesMediaTypeTypedDict
    ]
    message_body_workers: NotRequired[
        UploadTempAttachmentsKnowledgeBaseArticlesMessageBodyWorkersTypedDict
    ]
    parent: NotRequired[MultiPartTypedDict]
    providers: NotRequired[UploadTempAttachmentsProvidersTypedDict]
    body_parts: NotRequired[List[BodyPartTypedDict]]
    parameterized_headers: NotRequired[
        Dict[str, List[UploadTempAttachmentsParameterizedHeadersTypedDict]]
    ]


class Parent(BaseModel):
    content_disposition: Annotated[
        Optional[UploadTempAttachmentsKnowledgeBaseArticlesContentDisposition],
        pydantic.Field(alias="contentDisposition"),
    ] = None

    entity: Optional[UploadTempAttachmentsKnowledgeBaseArticlesEntity] = None

    headers: Optional[Dict[str, List[str]]] = None

    media_type: Annotated[
        Optional[UploadTempAttachmentsKnowledgeBaseArticlesMediaType],
        pydantic.Field(alias="mediaType"),
    ] = None

    message_body_workers: Annotated[
        Optional[UploadTempAttachmentsKnowledgeBaseArticlesMessageBodyWorkers],
        pydantic.Field(alias="messageBodyWorkers"),
    ] = None

    parent: Optional[MultiPart] = None

    providers: Optional[UploadTempAttachmentsProviders] = None

    body_parts: Annotated[
        Optional[List[BodyPart]], pydantic.Field(alias="bodyParts")
    ] = None

    parameterized_headers: Annotated[
        Optional[Dict[str, List[UploadTempAttachmentsParameterizedHeaders]]],
        pydantic.Field(alias="parameterizedHeaders"),
    ] = None


class UploadTempAttachmentsKnowledgeBaseArticlesProvidersTypedDict(TypedDict):
    pass


class UploadTempAttachmentsKnowledgeBaseArticlesProviders(BaseModel):
    pass


class FormDataContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]
    name: NotRequired[str]


class FormDataContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None

    name: Optional[str] = None


class UploadTempAttachmentsKnowledgeBaseArticlesParameterizedHeadersTypedDict(
    TypedDict
):
    value: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]


class UploadTempAttachmentsKnowledgeBaseArticlesParameterizedHeaders(BaseModel):
    value: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None


class FilesTypedDict(TypedDict):
    content_disposition: NotRequired[UploadTempAttachmentsContentDispositionTypedDict]
    entity: NotRequired[UploadTempAttachmentsEntityTypedDict]
    headers: NotRequired[Dict[str, List[str]]]
    media_type: NotRequired[UploadTempAttachmentsMediaTypeTypedDict]
    message_body_workers: NotRequired[UploadTempAttachmentsMessageBodyWorkersTypedDict]
    parent: NotRequired[ParentTypedDict]
    providers: NotRequired[UploadTempAttachmentsKnowledgeBaseArticlesProvidersTypedDict]
    simple: NotRequired[bool]
    form_data_content_disposition: NotRequired[FormDataContentDispositionTypedDict]
    name: NotRequired[str]
    value: NotRequired[str]
    parameterized_headers: NotRequired[
        Dict[
            str,
            List[
                UploadTempAttachmentsKnowledgeBaseArticlesParameterizedHeadersTypedDict
            ],
        ]
    ]


class Files(BaseModel):
    content_disposition: Annotated[
        Optional[UploadTempAttachmentsContentDisposition],
        pydantic.Field(alias="contentDisposition"),
    ] = None

    entity: Optional[UploadTempAttachmentsEntity] = None

    headers: Optional[Dict[str, List[str]]] = None

    media_type: Annotated[
        Optional[UploadTempAttachmentsMediaType], pydantic.Field(alias="mediaType")
    ] = None

    message_body_workers: Annotated[
        Optional[UploadTempAttachmentsMessageBodyWorkers],
        pydantic.Field(alias="messageBodyWorkers"),
    ] = None

    parent: Optional[Parent] = None

    providers: Optional[UploadTempAttachmentsKnowledgeBaseArticlesProviders] = None

    simple: Optional[bool] = None

    form_data_content_disposition: Annotated[
        Optional[FormDataContentDisposition],
        pydantic.Field(alias="formDataContentDisposition"),
    ] = None

    name: Optional[str] = None

    value: Optional[str] = None

    parameterized_headers: Annotated[
        Optional[
            Dict[
                str,
                List[UploadTempAttachmentsKnowledgeBaseArticlesParameterizedHeaders],
            ]
        ],
        pydantic.Field(alias="parameterizedHeaders"),
    ] = None


class UploadTempAttachmentsRequestBodyTypedDict(TypedDict):
    files: NotRequired[List[FilesTypedDict]]


class UploadTempAttachmentsRequestBody(BaseModel):
    files: Annotated[
        Optional[List[Files]], FieldMetadata(multipart=MultipartFormMetadata(json=True))
    ] = None


class UploadTempAttachmentsRequestTypedDict(TypedDict):
    entity_type: NotRequired[EntityType]
    request_body: NotRequired[UploadTempAttachmentsRequestBodyTypedDict]


class UploadTempAttachmentsRequest(BaseModel):
    entity_type: Annotated[
        Optional[EntityType],
        pydantic.Field(alias="entityType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    request_body: Annotated[
        Optional[UploadTempAttachmentsRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="multipart/form-data")),
    ] = None


class UploadTempAttachmentsResponseBodyTypedDict(TypedDict):
    name: NotRequired[str]
    r"""name"""
    mime_type: NotRequired[str]
    r"""Mime type"""
    size: NotRequired[str]
    r"""Size in bytes"""
    extension: NotRequired[str]
    r"""File extension"""
    content_id: NotRequired[str]
    r"""Content identifier"""


class UploadTempAttachmentsResponseBody(BaseModel):
    name: Optional[str] = None
    r"""name"""

    mime_type: Annotated[Optional[str], pydantic.Field(alias="mimeType")] = None
    r"""Mime type"""

    size: Optional[str] = None
    r"""Size in bytes"""

    extension: Optional[str] = None
    r"""File extension"""

    content_id: Annotated[Optional[str], pydantic.Field(alias="contentId")] = None
    r"""Content identifier"""

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetTicketByIDRequestTypedDict(TypedDict):
    ticket_id: int


class GetTicketByIDRequest(BaseModel):
    ticket_id: Annotated[
        int,
        pydantic.Field(alias="ticketId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]


class GetTicketByIDStatusTypedDict(TypedDict):
    name: NotRequired[str]
    display_name: NotRequired[str]
    parent_id: NotRequired[int]
    status_id: NotRequired[int]


class GetTicketByIDStatus(BaseModel):
    name: Optional[str] = None

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None

    parent_id: Annotated[Optional[int], pydantic.Field(alias="parentId")] = None

    status_id: Annotated[Optional[int], pydantic.Field(alias="statusId")] = None


class GetTicketByIDType(str, Enum):
    PROBLEM = "PROBLEM"
    QUESTION = "QUESTION"
    INCIDENT = "INCIDENT"
    TASK = "TASK"


class GetTicketByIDPriority(str, Enum):
    NONE = "NONE"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class GetTicketByIDSeverity(str, Enum):
    NONE = "NONE"
    MINOR = "MINOR"
    MODERATE = "MODERATE"
    MAJOR = "MAJOR"
    CRITICAL = "CRITICAL"


class GetTicketByIDSource(str, Enum):
    TECHNICIAN = "TECHNICIAN"
    EMAIL = "EMAIL"
    WEB_FORM = "WEB_FORM"
    HELP_REQUEST = "HELP_REQUEST"
    END_USER = "END_USER"
    CONDITION = "CONDITION"
    SCHEDULED_SCRIPT = "SCHEDULED_SCRIPT"
    ACTIVITY = "ACTIVITY"


class GetTicketByIDCcListTypedDict(TypedDict):
    uids: NotRequired[List[str]]
    emails: NotRequired[List[str]]


class GetTicketByIDCcList(BaseModel):
    uids: Optional[List[str]] = None

    emails: Optional[List[str]] = None


class GetTicketByIDValueTypedDict(TypedDict):
    pass


class GetTicketByIDValue(BaseModel):
    pass


class GetTicketByIDAttributeValuesTypedDict(TypedDict):
    id: NotRequired[int]
    attribute_id: NotRequired[int]
    value: NotRequired[GetTicketByIDValueTypedDict]


class GetTicketByIDAttributeValues(BaseModel):
    id: Optional[int] = None

    attribute_id: Annotated[Optional[int], pydantic.Field(alias="attributeId")] = None

    value: Optional[GetTicketByIDValue] = None


class GetTicketByIDResponseBodyTypedDict(TypedDict):
    r"""default response"""

    id: NotRequired[int]
    version: NotRequired[int]
    node_id: NotRequired[int]
    client_id: NotRequired[int]
    location_id: NotRequired[int]
    assigned_app_user_id: NotRequired[int]
    requester_uid: NotRequired[str]
    subject: NotRequired[str]
    status: NotRequired[GetTicketByIDStatusTypedDict]
    type: NotRequired[GetTicketByIDType]
    priority: NotRequired[GetTicketByIDPriority]
    severity: NotRequired[GetTicketByIDSeverity]
    ticket_form_id: NotRequired[int]
    source: NotRequired[GetTicketByIDSource]
    tags: NotRequired[List[str]]
    cc_list: NotRequired[GetTicketByIDCcListTypedDict]
    create_time: NotRequired[float]
    deleted: NotRequired[bool]
    attribute_values: NotRequired[List[GetTicketByIDAttributeValuesTypedDict]]


class GetTicketByIDResponseBody(BaseModel):
    r"""default response"""

    id: Optional[int] = None

    version: Optional[int] = None

    node_id: Annotated[Optional[int], pydantic.Field(alias="nodeId")] = None

    client_id: Annotated[Optional[int], pydantic.Field(alias="clientId")] = None

    location_id: Annotated[Optional[int], pydantic.Field(alias="locationId")] = None

    assigned_app_user_id: Annotated[
        Optional[int], pydantic.Field(alias="assignedAppUserId")
    ] = None

    requester_uid: Annotated[Optional[str], pydantic.Field(alias="requesterUid")] = None

    subject: Optional[str] = None

    status: Optional[GetTicketByIDStatus] = None

    type: Optional[GetTicketByIDType] = None

    priority: Optional[GetTicketByIDPriority] = None

    severity: Optional[GetTicketByIDSeverity] = None

    ticket_form_id: Annotated[Optional[int], pydantic.Field(alias="ticketFormId")] = (
        None
    )

    source: Optional[GetTicketByIDSource] = None

    tags: Optional[List[str]] = None

    cc_list: Annotated[
        Optional[GetTicketByIDCcList], pydantic.Field(alias="ccList")
    ] = None

    create_time: Annotated[Optional[float], pydantic.Field(alias="createTime")] = None

    deleted: Optional[bool] = None

    attribute_values: Annotated[
        Optional[List[GetTicketByIDAttributeValues]],
        pydantic.Field(alias="attributeValues"),
    ] = None

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import io
from ninjapy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from ninjapy.utils import (
    FieldMetadata,
    MultipartFormMetadata,
    PathParamMetadata,
    RequestMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import IO, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class CommentTypedDict(TypedDict):
    public: NotRequired[bool]
    body: NotRequired[Nullable[str]]
    html_body: NotRequired[Nullable[str]]
    time_tracked: NotRequired[Nullable[int]]
    r"""time in seconds"""
    duplicate_in_incidents: NotRequired[bool]


class Comment(BaseModel):
    public: Optional[bool] = True

    body: OptionalNullable[str] = UNSET

    html_body: Annotated[OptionalNullable[str], pydantic.Field(alias="htmlBody")] = (
        UNSET
    )

    time_tracked: Annotated[
        OptionalNullable[int], pydantic.Field(alias="timeTracked")
    ] = UNSET
    r"""time in seconds"""

    duplicate_in_incidents: Annotated[
        Optional[bool], pydantic.Field(alias="duplicateInIncidents")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "public",
            "body",
            "htmlBody",
            "timeTracked",
            "duplicateInIncidents",
        ]
        nullable_fields = ["body", "htmlBody", "timeTracked"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateCommentFilesTypedDict(TypedDict):
    file_name: str
    content: Union[bytes, IO[bytes], io.BufferedReader]
    content_type: NotRequired[str]


class CreateCommentFiles(BaseModel):
    file_name: Annotated[
        str, pydantic.Field(alias="fileName"), FieldMetadata(multipart=True)
    ]

    content: Annotated[
        Union[bytes, IO[bytes], io.BufferedReader],
        pydantic.Field(alias=""),
        FieldMetadata(multipart=MultipartFormMetadata(content=True)),
    ]

    content_type: Annotated[
        Optional[str],
        pydantic.Field(alias="Content-Type"),
        FieldMetadata(multipart=True),
    ] = None


class CreateCommentRequestBodyTypedDict(TypedDict):
    comment: NotRequired[CommentTypedDict]
    files: NotRequired[List[CreateCommentFilesTypedDict]]


class CreateCommentRequestBody(BaseModel):
    comment: Annotated[
        Optional[Comment], FieldMetadata(multipart=MultipartFormMetadata(json=True))
    ] = None

    files: Annotated[
        Optional[List[CreateCommentFiles]], FieldMetadata(multipart=True)
    ] = None


class CreateCommentRequestTypedDict(TypedDict):
    ticket_id: int
    request_body: NotRequired[CreateCommentRequestBodyTypedDict]


class CreateCommentRequest(BaseModel):
    ticket_id: Annotated[
        int,
        pydantic.Field(alias="ticketId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    request_body: Annotated[
        Optional[CreateCommentRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="multipart/form-data")),
    ] = None

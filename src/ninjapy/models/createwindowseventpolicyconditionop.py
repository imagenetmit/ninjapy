"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateWindowsEventPolicyConditionSeverity(str, Enum):
    r"""Policy condition severity"""

    NONE = "NONE"
    MINOR = "MINOR"
    MODERATE = "MODERATE"
    MAJOR = "MAJOR"
    CRITICAL = "CRITICAL"


class CreateWindowsEventPolicyConditionPriority(str, Enum):
    r"""Policy condition priority"""

    NONE = "NONE"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class CreateWindowsEventPolicyConditionRunAs(str, Enum):
    r"""Policy condition script runAs"""

    SYSTEM = "SYSTEM"
    LOGGED_ON_USER = "LOGGED_ON_USER"
    LOCAL_ADMIN = "LOCAL_ADMIN"
    DOMAIN_ADMIN = "DOMAIN_ADMIN"
    PREFERRED_CREDENTIAL_MAC = "PREFERRED_CREDENTIAL_MAC"
    PREFERRED_CREDENTIAL_LINUX = "PREFERRED_CREDENTIAL_LINUX"


class CreateWindowsEventPolicyConditionScriptVariablesTypedDict(TypedDict):
    r"""Policy condition script variable"""

    id: NotRequired[str]
    r"""Policy condition script variable Id"""
    value: NotRequired[str]
    r"""Policy condition script variable value"""


class CreateWindowsEventPolicyConditionScriptVariables(BaseModel):
    r"""Policy condition script variable"""

    id: Optional[str] = None
    r"""Policy condition script variable Id"""

    value: Optional[str] = None
    r"""Policy condition script variable value"""


class CreateWindowsEventPolicyConditionScriptsTypedDict(TypedDict):
    r"""Policy condition script"""

    script_id: NotRequired[int]
    r"""Policy condition script id"""
    run_as: NotRequired[CreateWindowsEventPolicyConditionRunAs]
    r"""Policy condition script runAs"""
    script_param: NotRequired[str]
    r"""Policy condition script parameter"""
    script_variables: NotRequired[
        List[CreateWindowsEventPolicyConditionScriptVariablesTypedDict]
    ]
    r"""Policy condition script variables"""


class CreateWindowsEventPolicyConditionScripts(BaseModel):
    r"""Policy condition script"""

    script_id: Annotated[Optional[int], pydantic.Field(alias="scriptId")] = None
    r"""Policy condition script id"""

    run_as: Annotated[
        Optional[CreateWindowsEventPolicyConditionRunAs], pydantic.Field(alias="runAs")
    ] = CreateWindowsEventPolicyConditionRunAs.SYSTEM
    r"""Policy condition script runAs"""

    script_param: Annotated[Optional[str], pydantic.Field(alias="scriptParam")] = None
    r"""Policy condition script parameter"""

    script_variables: Annotated[
        Optional[List[CreateWindowsEventPolicyConditionScriptVariables]],
        pydantic.Field(alias="scriptVariables"),
    ] = None
    r"""Policy condition script variables"""


class CreateWindowsEventPolicyConditionNotificationAction(str, Enum):
    r"""Policy condition notification action"""

    NONE = "NONE"
    SEND = "SEND"


class Condition(str, Enum):
    r"""Text condition"""

    CONTAINS = "CONTAINS"
    NOT_CONTAINS = "NOT_CONTAINS"


class Include(str, Enum):
    r"""Text include"""

    ALL = "ALL"
    ANY = "ANY"


class TextTypedDict(TypedDict):
    r"""Windows event policy condition text"""

    values: NotRequired[List[str]]
    r"""Text values"""
    condition: NotRequired[Condition]
    r"""Text condition"""
    include: NotRequired[Include]
    r"""Text include"""


class Text(BaseModel):
    r"""Windows event policy condition text"""

    values: Optional[List[str]] = None
    r"""Text values"""

    condition: Optional[Condition] = Condition.CONTAINS
    r"""Text condition"""

    include: Optional[Include] = Include.ALL
    r"""Text include"""


class OccurrenceTypedDict(TypedDict):
    r"""Windows event policy condition occurrence"""

    enabled: NotRequired[bool]
    r"""Occurrence enabled"""
    threshold: NotRequired[int]
    r"""Occurrence threshold"""
    duration: NotRequired[int]
    r"""Occurrence duration"""


class Occurrence(BaseModel):
    r"""Windows event policy condition occurrence"""

    enabled: Optional[bool] = False
    r"""Occurrence enabled"""

    threshold: Optional[int] = 2
    r"""Occurrence threshold"""

    duration: Optional[int] = 5
    r"""Occurrence duration"""


class CreateWindowsEventPolicyConditionRequestBodyTypedDict(TypedDict):
    r"""Windows event policy condition create request payload"""

    source: str
    r"""Event Source"""
    event_ids: List[int]
    r"""Event IDs"""
    enabled: NotRequired[bool]
    r"""Policy condition enabled"""
    display_name: NotRequired[str]
    r"""Policy condition display name"""
    severity: NotRequired[CreateWindowsEventPolicyConditionSeverity]
    r"""Policy condition severity"""
    priority: NotRequired[CreateWindowsEventPolicyConditionPriority]
    r"""Policy condition priority"""
    channels: NotRequired[List[int]]
    r"""Policy condition notification channels"""
    scripts: NotRequired[List[CreateWindowsEventPolicyConditionScriptsTypedDict]]
    r"""Policy condition scripts"""
    notification_action: NotRequired[
        CreateWindowsEventPolicyConditionNotificationAction
    ]
    r"""Policy condition notification action"""
    notify_on_reset: NotRequired[bool]
    r"""Policy condition notify on reset"""
    reset_threshold: NotRequired[int]
    r"""Policy condition reset threshold (seconds)"""
    text: NotRequired[TextTypedDict]
    r"""Windows event policy condition text"""
    occurrence: NotRequired[OccurrenceTypedDict]
    r"""Windows event policy condition occurrence"""


class CreateWindowsEventPolicyConditionRequestBody(BaseModel):
    r"""Windows event policy condition create request payload"""

    source: str
    r"""Event Source"""

    event_ids: Annotated[List[int], pydantic.Field(alias="eventIds")]
    r"""Event IDs"""

    enabled: Optional[bool] = True
    r"""Policy condition enabled"""

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""Policy condition display name"""

    severity: Optional[CreateWindowsEventPolicyConditionSeverity] = (
        CreateWindowsEventPolicyConditionSeverity.NONE
    )
    r"""Policy condition severity"""

    priority: Optional[CreateWindowsEventPolicyConditionPriority] = (
        CreateWindowsEventPolicyConditionPriority.NONE
    )
    r"""Policy condition priority"""

    channels: Optional[List[int]] = None
    r"""Policy condition notification channels"""

    scripts: Optional[List[CreateWindowsEventPolicyConditionScripts]] = None
    r"""Policy condition scripts"""

    notification_action: Annotated[
        Optional[CreateWindowsEventPolicyConditionNotificationAction],
        pydantic.Field(alias="notificationAction"),
    ] = CreateWindowsEventPolicyConditionNotificationAction.NONE
    r"""Policy condition notification action"""

    notify_on_reset: Annotated[
        Optional[bool], pydantic.Field(alias="notifyOnReset")
    ] = False
    r"""Policy condition notify on reset"""

    reset_threshold: Annotated[
        Optional[int], pydantic.Field(alias="resetThreshold")
    ] = 14400
    r"""Policy condition reset threshold (seconds)"""

    text: Optional[Text] = None
    r"""Windows event policy condition text"""

    occurrence: Optional[Occurrence] = None
    r"""Windows event policy condition occurrence"""


class CreateWindowsEventPolicyConditionRequestTypedDict(TypedDict):
    policy_id: int
    request_body: NotRequired[CreateWindowsEventPolicyConditionRequestBodyTypedDict]


class CreateWindowsEventPolicyConditionRequest(BaseModel):
    policy_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        Optional[CreateWindowsEventPolicyConditionRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class CreateWindowsEventPolicyConditionManagementSeverity(str, Enum):
    r"""Policy condition severity"""

    NONE = "NONE"
    MINOR = "MINOR"
    MODERATE = "MODERATE"
    MAJOR = "MAJOR"
    CRITICAL = "CRITICAL"


class CreateWindowsEventPolicyConditionManagementPriority(str, Enum):
    r"""Policy condition priority"""

    NONE = "NONE"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class CreateWindowsEventPolicyConditionManagementRunAs(str, Enum):
    r"""Policy condition script runAs"""

    SYSTEM = "SYSTEM"
    LOGGED_ON_USER = "LOGGED_ON_USER"
    LOCAL_ADMIN = "LOCAL_ADMIN"
    DOMAIN_ADMIN = "DOMAIN_ADMIN"
    PREFERRED_CREDENTIAL_MAC = "PREFERRED_CREDENTIAL_MAC"
    PREFERRED_CREDENTIAL_LINUX = "PREFERRED_CREDENTIAL_LINUX"


class CreateWindowsEventPolicyConditionManagementScriptVariablesTypedDict(TypedDict):
    r"""Policy condition script variable"""

    id: NotRequired[str]
    r"""Policy condition script variable Id"""
    value: NotRequired[str]
    r"""Policy condition script variable value"""


class CreateWindowsEventPolicyConditionManagementScriptVariables(BaseModel):
    r"""Policy condition script variable"""

    id: Optional[str] = None
    r"""Policy condition script variable Id"""

    value: Optional[str] = None
    r"""Policy condition script variable value"""


class CreateWindowsEventPolicyConditionManagementScriptsTypedDict(TypedDict):
    r"""Policy condition script"""

    script_id: NotRequired[int]
    r"""Policy condition script id"""
    run_as: NotRequired[CreateWindowsEventPolicyConditionManagementRunAs]
    r"""Policy condition script runAs"""
    script_param: NotRequired[str]
    r"""Policy condition script parameter"""
    script_variables: NotRequired[
        List[CreateWindowsEventPolicyConditionManagementScriptVariablesTypedDict]
    ]
    r"""Policy condition script variables"""


class CreateWindowsEventPolicyConditionManagementScripts(BaseModel):
    r"""Policy condition script"""

    script_id: Annotated[Optional[int], pydantic.Field(alias="scriptId")] = None
    r"""Policy condition script id"""

    run_as: Annotated[
        Optional[CreateWindowsEventPolicyConditionManagementRunAs],
        pydantic.Field(alias="runAs"),
    ] = CreateWindowsEventPolicyConditionManagementRunAs.SYSTEM
    r"""Policy condition script runAs"""

    script_param: Annotated[Optional[str], pydantic.Field(alias="scriptParam")] = None
    r"""Policy condition script parameter"""

    script_variables: Annotated[
        Optional[List[CreateWindowsEventPolicyConditionManagementScriptVariables]],
        pydantic.Field(alias="scriptVariables"),
    ] = None
    r"""Policy condition script variables"""


class CreateWindowsEventPolicyConditionManagementNotificationAction(str, Enum):
    r"""Policy condition notification action"""

    NONE = "NONE"
    SEND = "SEND"


class CreateWindowsEventPolicyConditionInheritanceTypedDict(TypedDict):
    r"""Policy condition inheritance status"""

    inherited: NotRequired[bool]
    r"""Is policy condition inherited"""
    overridden: NotRequired[bool]
    r"""Is policy condition overridden"""
    source_policy_id: NotRequired[int]
    r"""Parent policy Id"""


class CreateWindowsEventPolicyConditionInheritance(BaseModel):
    r"""Policy condition inheritance status"""

    inherited: Optional[bool] = None
    r"""Is policy condition inherited"""

    overridden: Optional[bool] = None
    r"""Is policy condition overridden"""

    source_policy_id: Annotated[
        Optional[int], pydantic.Field(alias="sourcePolicyId")
    ] = None
    r"""Parent policy Id"""


class CreateWindowsEventPolicyConditionCondition(str, Enum):
    r"""Text condition"""

    CONTAINS = "CONTAINS"
    NOT_CONTAINS = "NOT_CONTAINS"


class CreateWindowsEventPolicyConditionInclude(str, Enum):
    r"""Text include"""

    ALL = "ALL"
    ANY = "ANY"


class CreateWindowsEventPolicyConditionTextTypedDict(TypedDict):
    r"""Windows event policy condition text"""

    values: NotRequired[List[str]]
    r"""Text values"""
    condition: NotRequired[CreateWindowsEventPolicyConditionCondition]
    r"""Text condition"""
    include: NotRequired[CreateWindowsEventPolicyConditionInclude]
    r"""Text include"""


class CreateWindowsEventPolicyConditionText(BaseModel):
    r"""Windows event policy condition text"""

    values: Optional[List[str]] = None
    r"""Text values"""

    condition: Optional[CreateWindowsEventPolicyConditionCondition] = (
        CreateWindowsEventPolicyConditionCondition.CONTAINS
    )
    r"""Text condition"""

    include: Optional[CreateWindowsEventPolicyConditionInclude] = (
        CreateWindowsEventPolicyConditionInclude.ALL
    )
    r"""Text include"""


class CreateWindowsEventPolicyConditionOccurrenceTypedDict(TypedDict):
    r"""Windows event policy condition occurrence"""

    enabled: NotRequired[bool]
    r"""Occurrence enabled"""
    threshold: NotRequired[int]
    r"""Occurrence threshold"""
    duration: NotRequired[int]
    r"""Occurrence duration"""


class CreateWindowsEventPolicyConditionOccurrence(BaseModel):
    r"""Windows event policy condition occurrence"""

    enabled: Optional[bool] = False
    r"""Occurrence enabled"""

    threshold: Optional[int] = 2
    r"""Occurrence threshold"""

    duration: Optional[int] = 5
    r"""Occurrence duration"""


class CreateWindowsEventPolicyConditionResponseBodyTypedDict(TypedDict):
    r"""Windows event policy condition response payload"""

    id: NotRequired[str]
    r"""Policy condition id"""
    condition_name: NotRequired[str]
    r"""Policy condition name"""
    display_name: NotRequired[str]
    r"""Policy condition display name"""
    enabled: NotRequired[bool]
    r"""Policy condition enabled"""
    severity: NotRequired[CreateWindowsEventPolicyConditionManagementSeverity]
    r"""Policy condition severity"""
    priority: NotRequired[CreateWindowsEventPolicyConditionManagementPriority]
    r"""Policy condition priority"""
    channels: NotRequired[List[int]]
    r"""Policy condition notification channels"""
    scripts: NotRequired[
        List[CreateWindowsEventPolicyConditionManagementScriptsTypedDict]
    ]
    r"""Policy condition scripts"""
    notification_action: NotRequired[
        CreateWindowsEventPolicyConditionManagementNotificationAction
    ]
    r"""Policy condition notification action"""
    notify_on_reset: NotRequired[bool]
    r"""Policy condition notify on reset"""
    reset_threshold: NotRequired[int]
    r"""Policy condition reset threshold (seconds)"""
    inheritance: NotRequired[CreateWindowsEventPolicyConditionInheritanceTypedDict]
    r"""Policy condition inheritance status"""
    source: NotRequired[str]
    r"""Event Source"""
    event_ids: NotRequired[List[int]]
    r"""Event IDs"""
    text: NotRequired[CreateWindowsEventPolicyConditionTextTypedDict]
    r"""Windows event policy condition text"""
    occurrence: NotRequired[CreateWindowsEventPolicyConditionOccurrenceTypedDict]
    r"""Windows event policy condition occurrence"""


class CreateWindowsEventPolicyConditionResponseBody(BaseModel):
    r"""Windows event policy condition response payload"""

    id: Optional[str] = None
    r"""Policy condition id"""

    condition_name: Annotated[Optional[str], pydantic.Field(alias="conditionName")] = (
        None
    )
    r"""Policy condition name"""

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""Policy condition display name"""

    enabled: Optional[bool] = None
    r"""Policy condition enabled"""

    severity: Optional[CreateWindowsEventPolicyConditionManagementSeverity] = None
    r"""Policy condition severity"""

    priority: Optional[CreateWindowsEventPolicyConditionManagementPriority] = None
    r"""Policy condition priority"""

    channels: Optional[List[int]] = None
    r"""Policy condition notification channels"""

    scripts: Optional[List[CreateWindowsEventPolicyConditionManagementScripts]] = None
    r"""Policy condition scripts"""

    notification_action: Annotated[
        Optional[CreateWindowsEventPolicyConditionManagementNotificationAction],
        pydantic.Field(alias="notificationAction"),
    ] = None
    r"""Policy condition notification action"""

    notify_on_reset: Annotated[
        Optional[bool], pydantic.Field(alias="notifyOnReset")
    ] = None
    r"""Policy condition notify on reset"""

    reset_threshold: Annotated[
        Optional[int], pydantic.Field(alias="resetThreshold")
    ] = None
    r"""Policy condition reset threshold (seconds)"""

    inheritance: Optional[CreateWindowsEventPolicyConditionInheritance] = None
    r"""Policy condition inheritance status"""

    source: Optional[str] = None
    r"""Event Source"""

    event_ids: Annotated[Optional[List[int]], pydantic.Field(alias="eventIds")] = None
    r"""Event IDs"""

    text: Optional[CreateWindowsEventPolicyConditionText] = None
    r"""Windows event policy condition text"""

    occurrence: Optional[CreateWindowsEventPolicyConditionOccurrence] = None
    r"""Windows event policy condition occurrence"""

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata, RequestMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class QueryParamMode(str, Enum):
    r"""Policy creation mode"""

    NEW = "NEW"
    CHILD = "CHILD"
    COPY = "COPY"


class CreatePolicyNodeClass(str, Enum):
    r"""Node Class"""

    WINDOWS_SERVER = "WINDOWS_SERVER"
    WINDOWS_WORKSTATION = "WINDOWS_WORKSTATION"
    LINUX_WORKSTATION = "LINUX_WORKSTATION"
    MAC = "MAC"
    ANDROID = "ANDROID"
    APPLE_IOS = "APPLE_IOS"
    APPLE_IPADOS = "APPLE_IPADOS"
    VMWARE_VM_HOST = "VMWARE_VM_HOST"
    VMWARE_VM_GUEST = "VMWARE_VM_GUEST"
    HYPERV_VMM_HOST = "HYPERV_VMM_HOST"
    HYPERV_VMM_GUEST = "HYPERV_VMM_GUEST"
    LINUX_SERVER = "LINUX_SERVER"
    MAC_SERVER = "MAC_SERVER"
    CLOUD_MONITOR_TARGET = "CLOUD_MONITOR_TARGET"
    NMS_SWITCH = "NMS_SWITCH"
    NMS_ROUTER = "NMS_ROUTER"
    NMS_FIREWALL = "NMS_FIREWALL"
    NMS_PRIVATE_NETWORK_GATEWAY = "NMS_PRIVATE_NETWORK_GATEWAY"
    NMS_PRINTER = "NMS_PRINTER"
    NMS_SCANNER = "NMS_SCANNER"
    NMS_DIAL_MANAGER = "NMS_DIAL_MANAGER"
    NMS_WAP = "NMS_WAP"
    NMS_IPSLA = "NMS_IPSLA"
    NMS_COMPUTER = "NMS_COMPUTER"
    NMS_VM_HOST = "NMS_VM_HOST"
    NMS_APPLIANCE = "NMS_APPLIANCE"
    NMS_OTHER = "NMS_OTHER"
    NMS_SERVER = "NMS_SERVER"
    NMS_PHONE = "NMS_PHONE"
    NMS_VIRTUAL_MACHINE = "NMS_VIRTUAL_MACHINE"
    NMS_NETWORK_MANAGEMENT_AGENT = "NMS_NETWORK_MANAGEMENT_AGENT"


class CreatePolicyRequestBodyTypedDict(TypedDict):
    parent_policy_id: NotRequired[int]
    r"""Parent Policy identifier"""
    name: NotRequired[str]
    r"""Name"""
    description: NotRequired[str]
    r"""Description"""
    node_class: NotRequired[CreatePolicyNodeClass]
    r"""Node Class"""
    enabled: NotRequired[bool]
    r"""Policy Enabled Flag"""


class CreatePolicyRequestBody(BaseModel):
    parent_policy_id: Annotated[
        Optional[int], pydantic.Field(alias="parentPolicyId")
    ] = None
    r"""Parent Policy identifier"""

    name: Optional[str] = None
    r"""Name"""

    description: Optional[str] = None
    r"""Description"""

    node_class: Annotated[
        Optional[CreatePolicyNodeClass], pydantic.Field(alias="nodeClass")
    ] = None
    r"""Node Class"""

    enabled: Optional[bool] = True
    r"""Policy Enabled Flag"""


class CreatePolicyRequestTypedDict(TypedDict):
    mode: NotRequired[QueryParamMode]
    r"""Policy creation mode"""
    template_policy_id: NotRequired[int]
    r"""Template Policy identifier"""
    request_body: NotRequired[CreatePolicyRequestBodyTypedDict]


class CreatePolicyRequest(BaseModel):
    mode: Annotated[
        Optional[QueryParamMode],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Policy creation mode"""

    template_policy_id: Annotated[
        Optional[int],
        pydantic.Field(alias="templatePolicyId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Template Policy identifier"""

    request_body: Annotated[
        Optional[CreatePolicyRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class CreatePolicyManagementNodeClass(str, Enum):
    r"""Node Class"""

    WINDOWS_SERVER = "WINDOWS_SERVER"
    WINDOWS_WORKSTATION = "WINDOWS_WORKSTATION"
    LINUX_WORKSTATION = "LINUX_WORKSTATION"
    MAC = "MAC"
    ANDROID = "ANDROID"
    APPLE_IOS = "APPLE_IOS"
    APPLE_IPADOS = "APPLE_IPADOS"
    VMWARE_VM_HOST = "VMWARE_VM_HOST"
    VMWARE_VM_GUEST = "VMWARE_VM_GUEST"
    HYPERV_VMM_HOST = "HYPERV_VMM_HOST"
    HYPERV_VMM_GUEST = "HYPERV_VMM_GUEST"
    LINUX_SERVER = "LINUX_SERVER"
    MAC_SERVER = "MAC_SERVER"
    CLOUD_MONITOR_TARGET = "CLOUD_MONITOR_TARGET"
    NMS_SWITCH = "NMS_SWITCH"
    NMS_ROUTER = "NMS_ROUTER"
    NMS_FIREWALL = "NMS_FIREWALL"
    NMS_PRIVATE_NETWORK_GATEWAY = "NMS_PRIVATE_NETWORK_GATEWAY"
    NMS_PRINTER = "NMS_PRINTER"
    NMS_SCANNER = "NMS_SCANNER"
    NMS_DIAL_MANAGER = "NMS_DIAL_MANAGER"
    NMS_WAP = "NMS_WAP"
    NMS_IPSLA = "NMS_IPSLA"
    NMS_COMPUTER = "NMS_COMPUTER"
    NMS_VM_HOST = "NMS_VM_HOST"
    NMS_APPLIANCE = "NMS_APPLIANCE"
    NMS_OTHER = "NMS_OTHER"
    NMS_SERVER = "NMS_SERVER"
    NMS_PHONE = "NMS_PHONE"
    NMS_VIRTUAL_MACHINE = "NMS_VIRTUAL_MACHINE"
    NMS_NETWORK_MANAGEMENT_AGENT = "NMS_NETWORK_MANAGEMENT_AGENT"


class CreatePolicyFieldsTypedDict(TypedDict):
    r"""Custom Fields"""


class CreatePolicyFields(BaseModel):
    r"""Custom Fields"""


class CreatePolicyResponseBodyTypedDict(TypedDict):
    r"""Assigned policy (overrides organization and location policy mapping)"""

    id: NotRequired[int]
    r"""Policy identifier"""
    parent_policy_id: NotRequired[int]
    r"""Parent Policy identifier"""
    name: NotRequired[str]
    r"""Name"""
    description: NotRequired[str]
    r"""Description"""
    node_class: NotRequired[CreatePolicyManagementNodeClass]
    r"""Node Class"""
    updated: NotRequired[float]
    r"""Last update timestamp"""
    node_class_default: NotRequired[bool]
    r"""Is Default Policy for Node Class"""
    tags: NotRequired[List[str]]
    r"""Tags"""
    fields: NotRequired[Dict[str, CreatePolicyFieldsTypedDict]]
    r"""Custom Fields"""


class CreatePolicyResponseBody(BaseModel):
    r"""Assigned policy (overrides organization and location policy mapping)"""

    id: Optional[int] = None
    r"""Policy identifier"""

    parent_policy_id: Annotated[
        Optional[int], pydantic.Field(alias="parentPolicyId")
    ] = None
    r"""Parent Policy identifier"""

    name: Optional[str] = None
    r"""Name"""

    description: Optional[str] = None
    r"""Description"""

    node_class: Annotated[
        Optional[CreatePolicyManagementNodeClass], pydantic.Field(alias="nodeClass")
    ] = None
    r"""Node Class"""

    updated: Optional[float] = None
    r"""Last update timestamp"""

    node_class_default: Annotated[
        Optional[bool], pydantic.Field(alias="nodeClassDefault")
    ] = None
    r"""Is Default Policy for Node Class"""

    tags: Optional[List[str]] = None
    r"""Tags"""

    fields: Optional[Dict[str, CreatePolicyFields]] = None
    r"""Custom Fields"""

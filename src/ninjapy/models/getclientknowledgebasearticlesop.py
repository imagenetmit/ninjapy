"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetClientKnowledgeBaseArticlesRequestTypedDict(TypedDict):
    organization_ids: NotRequired[str]
    article_name: NotRequired[str]
    include_archived: NotRequired[bool]


class GetClientKnowledgeBaseArticlesRequest(BaseModel):
    organization_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="organizationIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    article_name: Annotated[
        Optional[str],
        pydantic.Field(alias="articleName"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    include_archived: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeArchived"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class GetClientKnowledgeBaseArticlesUploadStatus(str, Enum):
    r"""Upload status"""

    PROCESSING = "PROCESSING"
    SUCCESS = "SUCCESS"
    FAILURE = "FAILURE"
    SUSPICIOUS = "SUSPICIOUS"


class GetClientKnowledgeBaseArticlesMetadataTypedDict(TypedDict):
    r"""Attachment metadata"""

    name: NotRequired[str]
    mime_type: NotRequired[str]
    size: NotRequired[str]
    extension: NotRequired[str]
    content_id: NotRequired[str]
    inline: NotRequired[bool]


class GetClientKnowledgeBaseArticlesMetadata(BaseModel):
    r"""Attachment metadata"""

    name: Optional[str] = None

    mime_type: Annotated[Optional[str], pydantic.Field(alias="mimeType")] = None

    size: Optional[str] = None

    extension: Optional[str] = None

    content_id: Annotated[Optional[str], pydantic.Field(alias="contentId")] = None

    inline: Optional[bool] = None


class GetClientKnowledgeBaseArticlesAttachmentsTypedDict(TypedDict):
    r"""Lists the files associated with the article"""

    id: NotRequired[int]
    r"""Identifier"""
    upload_status: NotRequired[GetClientKnowledgeBaseArticlesUploadStatus]
    r"""Upload status"""
    metadata: NotRequired[GetClientKnowledgeBaseArticlesMetadataTypedDict]
    r"""Attachment metadata"""


class GetClientKnowledgeBaseArticlesAttachments(BaseModel):
    r"""Lists the files associated with the article"""

    id: Optional[int] = None
    r"""Identifier"""

    upload_status: Annotated[
        Optional[GetClientKnowledgeBaseArticlesUploadStatus],
        pydantic.Field(alias="uploadStatus"),
    ] = None
    r"""Upload status"""

    metadata: Optional[GetClientKnowledgeBaseArticlesMetadata] = None
    r"""Attachment metadata"""


class GetClientKnowledgeBaseArticlesContentTypedDict(TypedDict):
    r"""Article content"""

    html: NotRequired[str]
    r"""Article content html"""
    text: NotRequired[str]
    r"""Article content text"""


class GetClientKnowledgeBaseArticlesContent(BaseModel):
    r"""Article content"""

    html: Optional[str] = None
    r"""Article content html"""

    text: Optional[str] = None
    r"""Article content text"""


class GetClientKnowledgeBaseArticlesResponseBodyTypedDict(TypedDict):
    id: NotRequired[int]
    r"""Identifier"""
    organization_id: NotRequired[int]
    r"""Organization identifier"""
    parent_folder_id: NotRequired[int]
    r"""Parent folder identifier"""
    name: NotRequired[str]
    r"""Article name"""
    is_ninja_article: NotRequired[bool]
    r"""Indicates if the article was created in ninja"""
    is_archived: NotRequired[bool]
    r"""Indicates if the article is archived"""
    attachments: NotRequired[List[GetClientKnowledgeBaseArticlesAttachmentsTypedDict]]
    r"""Lists the files associated with the article"""
    content: NotRequired[GetClientKnowledgeBaseArticlesContentTypedDict]
    r"""Article content"""
    create_time: NotRequired[float]
    r"""Article created time"""
    update_time: NotRequired[float]
    r"""Article last updated time"""
    archived_time: NotRequired[float]
    r"""Article archived time"""
    path: NotRequired[str]
    r"""Article path"""


class GetClientKnowledgeBaseArticlesResponseBody(BaseModel):
    id: Optional[int] = None
    r"""Identifier"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization identifier"""

    parent_folder_id: Annotated[
        Optional[int], pydantic.Field(alias="parentFolderId")
    ] = None
    r"""Parent folder identifier"""

    name: Optional[str] = None
    r"""Article name"""

    is_ninja_article: Annotated[
        Optional[bool], pydantic.Field(alias="isNinjaArticle")
    ] = None
    r"""Indicates if the article was created in ninja"""

    is_archived: Annotated[Optional[bool], pydantic.Field(alias="isArchived")] = None
    r"""Indicates if the article is archived"""

    attachments: Optional[List[GetClientKnowledgeBaseArticlesAttachments]] = None
    r"""Lists the files associated with the article"""

    content: Optional[GetClientKnowledgeBaseArticlesContent] = None
    r"""Article content"""

    create_time: Annotated[Optional[float], pydantic.Field(alias="createTime")] = None
    r"""Article created time"""

    update_time: Annotated[Optional[float], pydantic.Field(alias="updateTime")] = None
    r"""Article last updated time"""

    archived_time: Annotated[Optional[float], pydantic.Field(alias="archivedTime")] = (
        None
    )
    r"""Article archived time"""

    path: Optional[str] = None
    r"""Article path"""

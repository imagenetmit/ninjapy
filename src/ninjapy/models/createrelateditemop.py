"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .bodypart import BodyPart, BodyPartTypedDict
from .multipart import MultiPart, MultiPartTypedDict
from datetime import datetime
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import (
    FieldMetadata,
    MultipartFormMetadata,
    PathParamMetadata,
    RequestMetadata,
)
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateRelatedItemPathParamEntityType(str, Enum):
    ORGANIZATION = "ORGANIZATION"
    DOCUMENT = "DOCUMENT"
    LOCATION = "LOCATION"
    NODE = "NODE"
    CHECKLIST = "CHECKLIST"
    KB_DOCUMENT = "KB_DOCUMENT"


class CreateRelatedItemContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]


class CreateRelatedItemContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None


class CreateRelatedItemEntityTypedDict(TypedDict):
    pass


class CreateRelatedItemEntity(BaseModel):
    pass


class CreateRelatedItemMediaTypeTypedDict(TypedDict):
    type: NotRequired[str]
    subtype: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    wildcard_type: NotRequired[bool]
    wildcard_subtype: NotRequired[bool]


class CreateRelatedItemMediaType(BaseModel):
    type: Optional[str] = None

    subtype: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    wildcard_type: Annotated[Optional[bool], pydantic.Field(alias="wildcardType")] = (
        None
    )

    wildcard_subtype: Annotated[
        Optional[bool], pydantic.Field(alias="wildcardSubtype")
    ] = None


class CreateRelatedItemMessageBodyWorkersTypedDict(TypedDict):
    pass


class CreateRelatedItemMessageBodyWorkers(BaseModel):
    pass


class CreateRelatedItemRelatedItemsContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]


class CreateRelatedItemRelatedItemsContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None


class CreateRelatedItemRelatedItemsEntityTypedDict(TypedDict):
    pass


class CreateRelatedItemRelatedItemsEntity(BaseModel):
    pass


class CreateRelatedItemRelatedItemsMediaTypeTypedDict(TypedDict):
    type: NotRequired[str]
    subtype: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    wildcard_type: NotRequired[bool]
    wildcard_subtype: NotRequired[bool]


class CreateRelatedItemRelatedItemsMediaType(BaseModel):
    type: Optional[str] = None

    subtype: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    wildcard_type: Annotated[Optional[bool], pydantic.Field(alias="wildcardType")] = (
        None
    )

    wildcard_subtype: Annotated[
        Optional[bool], pydantic.Field(alias="wildcardSubtype")
    ] = None


class CreateRelatedItemRelatedItemsMessageBodyWorkersTypedDict(TypedDict):
    pass


class CreateRelatedItemRelatedItemsMessageBodyWorkers(BaseModel):
    pass


class CreateRelatedItemProvidersTypedDict(TypedDict):
    pass


class CreateRelatedItemProviders(BaseModel):
    pass


class CreateRelatedItemParameterizedHeadersTypedDict(TypedDict):
    value: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]


class CreateRelatedItemParameterizedHeaders(BaseModel):
    value: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None


class CreateRelatedItemParentTypedDict(TypedDict):
    content_disposition: NotRequired[
        CreateRelatedItemRelatedItemsContentDispositionTypedDict
    ]
    entity: NotRequired[CreateRelatedItemRelatedItemsEntityTypedDict]
    headers: NotRequired[Dict[str, List[str]]]
    media_type: NotRequired[CreateRelatedItemRelatedItemsMediaTypeTypedDict]
    message_body_workers: NotRequired[
        CreateRelatedItemRelatedItemsMessageBodyWorkersTypedDict
    ]
    parent: NotRequired[MultiPartTypedDict]
    providers: NotRequired[CreateRelatedItemProvidersTypedDict]
    body_parts: NotRequired[List[BodyPartTypedDict]]
    parameterized_headers: NotRequired[
        Dict[str, List[CreateRelatedItemParameterizedHeadersTypedDict]]
    ]


class CreateRelatedItemParent(BaseModel):
    content_disposition: Annotated[
        Optional[CreateRelatedItemRelatedItemsContentDisposition],
        pydantic.Field(alias="contentDisposition"),
    ] = None

    entity: Optional[CreateRelatedItemRelatedItemsEntity] = None

    headers: Optional[Dict[str, List[str]]] = None

    media_type: Annotated[
        Optional[CreateRelatedItemRelatedItemsMediaType],
        pydantic.Field(alias="mediaType"),
    ] = None

    message_body_workers: Annotated[
        Optional[CreateRelatedItemRelatedItemsMessageBodyWorkers],
        pydantic.Field(alias="messageBodyWorkers"),
    ] = None

    parent: Optional[MultiPart] = None

    providers: Optional[CreateRelatedItemProviders] = None

    body_parts: Annotated[
        Optional[List[BodyPart]], pydantic.Field(alias="bodyParts")
    ] = None

    parameterized_headers: Annotated[
        Optional[Dict[str, List[CreateRelatedItemParameterizedHeaders]]],
        pydantic.Field(alias="parameterizedHeaders"),
    ] = None


class CreateRelatedItemRelatedItemsProvidersTypedDict(TypedDict):
    pass


class CreateRelatedItemRelatedItemsProviders(BaseModel):
    pass


class CreateRelatedItemFormDataContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]
    name: NotRequired[str]


class CreateRelatedItemFormDataContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None

    name: Optional[str] = None


class CreateRelatedItemRelatedItemsParameterizedHeadersTypedDict(TypedDict):
    value: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]


class CreateRelatedItemRelatedItemsParameterizedHeaders(BaseModel):
    value: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None


class FileTypedDict(TypedDict):
    content_disposition: NotRequired[CreateRelatedItemContentDispositionTypedDict]
    entity: NotRequired[CreateRelatedItemEntityTypedDict]
    headers: NotRequired[Dict[str, List[str]]]
    media_type: NotRequired[CreateRelatedItemMediaTypeTypedDict]
    message_body_workers: NotRequired[CreateRelatedItemMessageBodyWorkersTypedDict]
    parent: NotRequired[CreateRelatedItemParentTypedDict]
    providers: NotRequired[CreateRelatedItemRelatedItemsProvidersTypedDict]
    simple: NotRequired[bool]
    form_data_content_disposition: NotRequired[
        CreateRelatedItemFormDataContentDispositionTypedDict
    ]
    name: NotRequired[str]
    value: NotRequired[str]
    parameterized_headers: NotRequired[
        Dict[str, List[CreateRelatedItemRelatedItemsParameterizedHeadersTypedDict]]
    ]


class File(BaseModel):
    content_disposition: Annotated[
        Optional[CreateRelatedItemContentDisposition],
        pydantic.Field(alias="contentDisposition"),
    ] = None

    entity: Optional[CreateRelatedItemEntity] = None

    headers: Optional[Dict[str, List[str]]] = None

    media_type: Annotated[
        Optional[CreateRelatedItemMediaType], pydantic.Field(alias="mediaType")
    ] = None

    message_body_workers: Annotated[
        Optional[CreateRelatedItemMessageBodyWorkers],
        pydantic.Field(alias="messageBodyWorkers"),
    ] = None

    parent: Optional[CreateRelatedItemParent] = None

    providers: Optional[CreateRelatedItemRelatedItemsProviders] = None

    simple: Optional[bool] = None

    form_data_content_disposition: Annotated[
        Optional[CreateRelatedItemFormDataContentDisposition],
        pydantic.Field(alias="formDataContentDisposition"),
    ] = None

    name: Optional[str] = None

    value: Optional[str] = None

    parameterized_headers: Annotated[
        Optional[Dict[str, List[CreateRelatedItemRelatedItemsParameterizedHeaders]]],
        pydantic.Field(alias="parameterizedHeaders"),
    ] = None


class CreateRelatedItemRequestBodyTypedDict(TypedDict):
    file: NotRequired[FileTypedDict]


class CreateRelatedItemRequestBody(BaseModel):
    file: Annotated[
        Optional[File], FieldMetadata(multipart=MultipartFormMetadata(json=True))
    ] = None


class CreateRelatedItemRequestTypedDict(TypedDict):
    entity_type: CreateRelatedItemPathParamEntityType
    entity_id: int
    request_body: NotRequired[CreateRelatedItemRequestBodyTypedDict]


class CreateRelatedItemRequest(BaseModel):
    entity_type: Annotated[
        CreateRelatedItemPathParamEntityType,
        pydantic.Field(alias="entityType"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    entity_id: Annotated[
        int,
        pydantic.Field(alias="entityId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    request_body: Annotated[
        Optional[CreateRelatedItemRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="multipart/form-data")),
    ] = None


class CreateRelatedItemType(str, Enum):
    r"""Type of Relation"""

    VALUE = "VALUE"
    ENTITY = "ENTITY"


class CreateRelatedItemRelatedItemsResponseEntityTypedDict(TypedDict):
    r"""Entity"""


class CreateRelatedItemRelatedItemsResponseEntity(BaseModel):
    r"""Entity"""


class CreateRelatedItemEntityType(str, Enum):
    r"""Entity Type"""

    ORGANIZATION = "ORGANIZATION"
    DOCUMENT = "DOCUMENT"
    LOCATION = "LOCATION"
    NODE = "NODE"
    CHECKLIST = "CHECKLIST"
    KB_DOCUMENT = "KB_DOCUMENT"


class RelEntityTypedDict(TypedDict):
    r"""Related Entity"""


class RelEntity(BaseModel):
    r"""Related Entity"""


class CreateRelatedItemRelEntityType(str, Enum):
    r"""Related Entity Type"""

    ORGANIZATION = "ORGANIZATION"
    DOCUMENT = "DOCUMENT"
    LOCATION = "LOCATION"
    NODE = "NODE"
    ATTACHMENT = "ATTACHMENT"
    TECHNICIAN = "TECHNICIAN"
    CREDENTIAL = "CREDENTIAL"
    CHECKLIST = "CHECKLIST"
    END_USER = "END_USER"
    CONTACT = "CONTACT"
    KB_DOCUMENT = "KB_DOCUMENT"
    SECURE = "SECURE"


class ValueTypedDict(TypedDict):
    r"""Related item value (Attachment meta data / Secure information)"""


class Value(BaseModel):
    r"""Related item value (Attachment meta data / Secure information)"""


class CreateRelatedItemResponseBodyTypedDict(TypedDict):
    r"""Returns the attachment related item created for an entity"""

    id: NotRequired[int]
    r"""Identifier"""
    type: NotRequired[CreateRelatedItemType]
    r"""Type of Relation"""
    entity: NotRequired[CreateRelatedItemRelatedItemsResponseEntityTypedDict]
    r"""Entity"""
    entity_id: NotRequired[int]
    r"""Entity Identifier"""
    entity_type: NotRequired[CreateRelatedItemEntityType]
    r"""Entity Type"""
    rel_entity: NotRequired[RelEntityTypedDict]
    r"""Related Entity"""
    rel_entity_id: NotRequired[int]
    r"""Related Entity Identifier"""
    rel_entity_type: NotRequired[CreateRelatedItemRelEntityType]
    r"""Related Entity Type"""
    value: NotRequired[ValueTypedDict]
    r"""Related item value (Attachment meta data / Secure information)"""
    create_time: NotRequired[float]
    r"""Creation time"""
    update_time: NotRequired[float]
    r"""Last update time"""
    created_by_app_user_id: NotRequired[int]
    r"""The identifier of the user who created the related item"""
    updated_by_app_user_id: NotRequired[int]
    r"""The identifier of the last user to update the related item"""


class CreateRelatedItemResponseBody(BaseModel):
    r"""Returns the attachment related item created for an entity"""

    id: Optional[int] = None
    r"""Identifier"""

    type: Optional[CreateRelatedItemType] = None
    r"""Type of Relation"""

    entity: Optional[CreateRelatedItemRelatedItemsResponseEntity] = None
    r"""Entity"""

    entity_id: Annotated[Optional[int], pydantic.Field(alias="entityId")] = None
    r"""Entity Identifier"""

    entity_type: Annotated[
        Optional[CreateRelatedItemEntityType], pydantic.Field(alias="entityType")
    ] = None
    r"""Entity Type"""

    rel_entity: Annotated[Optional[RelEntity], pydantic.Field(alias="relEntity")] = None
    r"""Related Entity"""

    rel_entity_id: Annotated[Optional[int], pydantic.Field(alias="relEntityId")] = None
    r"""Related Entity Identifier"""

    rel_entity_type: Annotated[
        Optional[CreateRelatedItemRelEntityType], pydantic.Field(alias="relEntityType")
    ] = None
    r"""Related Entity Type"""

    value: Optional[Value] = None
    r"""Related item value (Attachment meta data / Secure information)"""

    create_time: Annotated[Optional[float], pydantic.Field(alias="createTime")] = None
    r"""Creation time"""

    update_time: Annotated[Optional[float], pydantic.Field(alias="updateTime")] = None
    r"""Last update time"""

    created_by_app_user_id: Annotated[
        Optional[int], pydantic.Field(alias="createdByAppUserId")
    ] = None
    r"""The identifier of the user who created the related item"""

    updated_by_app_user_id: Annotated[
        Optional[int], pydantic.Field(alias="updatedByAppUserId")
    ] = None
    r"""The identifier of the last user to update the related item"""

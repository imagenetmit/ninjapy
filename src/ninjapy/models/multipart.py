"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from ninjapy.types import BaseModel
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]


class ContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None


class EntityTypedDict(TypedDict):
    pass


class Entity(BaseModel):
    pass


class MediaTypeTypedDict(TypedDict):
    type: NotRequired[str]
    subtype: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    wildcard_type: NotRequired[bool]
    wildcard_subtype: NotRequired[bool]


class MediaType(BaseModel):
    type: Optional[str] = None

    subtype: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    wildcard_type: Annotated[Optional[bool], pydantic.Field(alias="wildcardType")] = (
        None
    )

    wildcard_subtype: Annotated[
        Optional[bool], pydantic.Field(alias="wildcardSubtype")
    ] = None


class MessageBodyWorkersTypedDict(TypedDict):
    pass


class MessageBodyWorkers(BaseModel):
    pass


class ProvidersTypedDict(TypedDict):
    pass


class Providers(BaseModel):
    pass


class MultiPartParameterizedHeadersTypedDict(TypedDict):
    value: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]


class MultiPartParameterizedHeaders(BaseModel):
    value: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None


class MultiPartTypedDict(TypedDict):
    content_disposition: NotRequired[ContentDispositionTypedDict]
    entity: NotRequired[EntityTypedDict]
    headers: NotRequired[Dict[str, List[str]]]
    media_type: NotRequired[MediaTypeTypedDict]
    message_body_workers: NotRequired[MessageBodyWorkersTypedDict]
    parent: NotRequired[MultiPartTypedDict]
    providers: NotRequired[ProvidersTypedDict]
    body_parts: NotRequired[List["BodyPartTypedDict"]]
    parameterized_headers: NotRequired[
        Dict[str, List[MultiPartParameterizedHeadersTypedDict]]
    ]


class MultiPart(BaseModel):
    content_disposition: Annotated[
        Optional[ContentDisposition], pydantic.Field(alias="contentDisposition")
    ] = None

    entity: Optional[Entity] = None

    headers: Optional[Dict[str, List[str]]] = None

    media_type: Annotated[Optional[MediaType], pydantic.Field(alias="mediaType")] = None

    message_body_workers: Annotated[
        Optional[MessageBodyWorkers], pydantic.Field(alias="messageBodyWorkers")
    ] = None

    parent: Optional[MultiPart] = None

    providers: Optional[Providers] = None

    body_parts: Annotated[
        Optional[List["BodyPart"]], pydantic.Field(alias="bodyParts")
    ] = None

    parameterized_headers: Annotated[
        Optional[Dict[str, List[MultiPartParameterizedHeaders]]],
        pydantic.Field(alias="parameterizedHeaders"),
    ] = None

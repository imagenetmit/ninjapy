"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class QueryParamUserType(str, Enum):
    r"""User Type"""

    TECHNICIAN = "TECHNICIAN"
    END_USER = "END_USER"
    CONTACT = "CONTACT"


class GetAllUserAndContactsRequestTypedDict(TypedDict):
    page_size: NotRequired[int]
    r"""Limit number of records per page"""
    anchor_natural_id: NotRequired[int]
    r"""Last User Identifier from previous page"""
    search_criteria: NotRequired[str]
    r"""Search by first name, last name or email address"""
    user_type: NotRequired[QueryParamUserType]
    r"""User Type"""
    client_id: NotRequired[int]
    r"""Organization identifier"""


class GetAllUserAndContactsRequest(BaseModel):
    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Limit number of records per page"""

    anchor_natural_id: Annotated[
        Optional[int],
        pydantic.Field(alias="anchorNaturalId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Last User Identifier from previous page"""

    search_criteria: Annotated[
        Optional[str],
        pydantic.Field(alias="searchCriteria"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Search by first name, last name or email address"""

    user_type: Annotated[
        Optional[QueryParamUserType],
        pydantic.Field(alias="userType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""User Type"""

    client_id: Annotated[
        Optional[int],
        pydantic.Field(alias="clientId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Organization identifier"""


class GetAllUserAndContactsUserType(str, Enum):
    r"""System User Type"""

    TECHNICIAN = "TECHNICIAN"
    END_USER = "END_USER"
    CONTACT = "CONTACT"


class GetAllUserAndContactsResponseBodyTypedDict(TypedDict):
    uid: NotRequired[str]
    r"""Global identifier for the user"""
    id: NotRequired[int]
    r"""User identifier"""
    client_id: NotRequired[int]
    r"""Client identifier"""
    first_name: NotRequired[str]
    r"""The user's first name"""
    last_name: NotRequired[str]
    r"""The user's last name"""
    email: NotRequired[str]
    r"""The user's email address"""
    user_type: NotRequired[GetAllUserAndContactsUserType]
    r"""System User Type"""
    natural_id: NotRequired[str]
    r"""Last User Identifier"""


class GetAllUserAndContactsResponseBody(BaseModel):
    uid: Optional[str] = None
    r"""Global identifier for the user"""

    id: Optional[int] = None
    r"""User identifier"""

    client_id: Annotated[Optional[int], pydantic.Field(alias="clientId")] = None
    r"""Client identifier"""

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None
    r"""The user's first name"""

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None
    r"""The user's last name"""

    email: Optional[str] = None
    r"""The user's email address"""

    user_type: Annotated[
        Optional[GetAllUserAndContactsUserType], pydantic.Field(alias="userType")
    ] = None
    r"""System User Type"""

    natural_id: Annotated[Optional[str], pydantic.Field(alias="naturalId")] = None
    r"""Last User Identifier"""

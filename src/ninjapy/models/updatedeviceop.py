"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WarrantyTypedDict(TypedDict):
    r"""Warranty Info"""

    start_date: NotRequired[float]
    r"""Warranty Start Date (Seconds)"""
    end_date: NotRequired[float]
    r"""Warranty End Date (Seconds)"""
    manufacturer_fulfillment_date: NotRequired[float]
    r"""Manufacturer Fulfillment Date"""


class Warranty(BaseModel):
    r"""Warranty Info"""

    start_date: Annotated[Optional[float], pydantic.Field(alias="startDate")] = None
    r"""Warranty Start Date (Seconds)"""

    end_date: Annotated[Optional[float], pydantic.Field(alias="endDate")] = None
    r"""Warranty End Date (Seconds)"""

    manufacturer_fulfillment_date: Annotated[
        Optional[float], pydantic.Field(alias="manufacturerFulfillmentDate")
    ] = None
    r"""Manufacturer Fulfillment Date"""


class UpdateDeviceRequestBodyTypedDict(TypedDict):
    display_name: NotRequired[str]
    r"""Display name (User assigned)"""
    user_data: NotRequired[Dict[str, Any]]
    r"""Custom attributes"""
    node_role_id: NotRequired[int]
    r"""Node Role identifier"""
    policy_id: NotRequired[int]
    r"""Assigned policy ID (overrides organization policy mapping, or reverts to organization policy if Null)"""
    organization_id: NotRequired[int]
    r"""Organization identifier"""
    location_id: NotRequired[int]
    r"""Location identifier"""
    warranty: NotRequired[WarrantyTypedDict]
    r"""Warranty Info"""


class UpdateDeviceRequestBody(BaseModel):
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""Display name (User assigned)"""

    user_data: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="userData")] = (
        None
    )
    r"""Custom attributes"""

    node_role_id: Annotated[Optional[int], pydantic.Field(alias="nodeRoleId")] = None
    r"""Node Role identifier"""

    policy_id: Annotated[Optional[int], pydantic.Field(alias="policyId")] = None
    r"""Assigned policy ID (overrides organization policy mapping, or reverts to organization policy if Null)"""

    organization_id: Annotated[
        Optional[int], pydantic.Field(alias="organizationId")
    ] = None
    r"""Organization identifier"""

    location_id: Annotated[Optional[int], pydantic.Field(alias="locationId")] = None
    r"""Location identifier"""

    warranty: Optional[Warranty] = None
    r"""Warranty Info"""


class UpdateDeviceRequestTypedDict(TypedDict):
    id: int
    r"""Device identifier"""
    request_body: NotRequired[UpdateDeviceRequestBodyTypedDict]


class UpdateDeviceRequest(BaseModel):
    id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Device identifier"""

    request_body: Annotated[
        Optional[UpdateDeviceRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetDeviceHealthReportRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter"""
    health: NotRequired[str]
    r"""Health status filter"""
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]
    r"""Limit number of records per page"""


class GetDeviceHealthReportRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter"""

    health: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Health status filter"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit number of records per page"""


class GetDeviceHealthReportCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetDeviceHealthReportCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class AvInstallStatus(str, Enum):
    r"""Antivirus installation status"""

    REQUESTED = "REQUESTED"
    DOWNLOAD_STARTED = "DOWNLOAD_STARTED"
    DOWNLOADED = "DOWNLOADED"
    DOWNLOAD_FAILED = "DOWNLOAD_FAILED"
    INSTALL_STARTED = "INSTALL_STARTED"
    INSTALLED = "INSTALLED"
    INSTALL_FAILED = "INSTALL_FAILED"
    UNINSTALL_REQUESTED = "UNINSTALL_REQUESTED"
    UNINSTALL_FAILED = "UNINSTALL_FAILED"
    UNINSTALLED = "UNINSTALLED"


class ProductsInstallationStatuses(str, Enum):
    r"""Integrated products' installation statuses"""

    REQUESTED = "REQUESTED"
    DOWNLOAD_STARTED = "DOWNLOAD_STARTED"
    DOWNLOADED = "DOWNLOADED"
    DOWNLOAD_FAILED = "DOWNLOAD_FAILED"
    INSTALL_STARTED = "INSTALL_STARTED"
    INSTALLED = "INSTALLED"
    INSTALL_FAILED = "INSTALL_FAILED"
    UNINSTALL_REQUESTED = "UNINSTALL_REQUESTED"
    UNINSTALL_FAILED = "UNINSTALL_FAILED"
    UNINSTALLED = "UNINSTALLED"


class HealthStatus(str, Enum):
    r"""Health status"""

    UNKNOWN = "UNKNOWN"
    HEALTHY = "HEALTHY"
    NEEDS_ATTENTION = "NEEDS_ATTENTION"
    UNHEALTHY = "UNHEALTHY"


class GetDeviceHealthReportResultsTypedDict(TypedDict):
    active_threats_count: NotRequired[int]
    r"""Active AV threats count"""
    quarantined_threats_count: NotRequired[int]
    r"""Quarantined AV threats count"""
    blocked_threats_count: NotRequired[int]
    r"""Blocked AV threats count"""
    failed_os_patches_count: NotRequired[int]
    r"""Number of failed OS patches"""
    pending_os_patches_count: NotRequired[int]
    r"""Number of pending OS patches"""
    alert_count: NotRequired[int]
    r"""Alerts count"""
    active_job_count: NotRequired[int]
    r"""Alerts job count"""
    failed_software_patches_count: NotRequired[int]
    r"""Number of failed software patches"""
    pending_software_patches_count: NotRequired[int]
    r"""Number of pending software patches"""
    pending_reboot_reason: NotRequired[str]
    r"""Pending reboot reasons"""
    av_install_status: NotRequired[AvInstallStatus]
    r"""Antivirus installation status"""
    products_installation_statuses: NotRequired[Dict[str, ProductsInstallationStatuses]]
    r"""Integrated products' installation statuses"""
    offline: NotRequired[bool]
    r"""Is device offline?"""
    parent_device_id: NotRequired[int]
    r"""Parent device identifier"""
    parent_offline: NotRequired[bool]
    r"""Is parent device offline"""
    health_status: NotRequired[HealthStatus]
    r"""Health status"""
    installation_issues_count: NotRequired[int]
    device_id: NotRequired[int]
    r"""Device identifier"""


class GetDeviceHealthReportResults(BaseModel):
    active_threats_count: Annotated[
        Optional[int], pydantic.Field(alias="activeThreatsCount")
    ] = None
    r"""Active AV threats count"""

    quarantined_threats_count: Annotated[
        Optional[int], pydantic.Field(alias="quarantinedThreatsCount")
    ] = None
    r"""Quarantined AV threats count"""

    blocked_threats_count: Annotated[
        Optional[int], pydantic.Field(alias="blockedThreatsCount")
    ] = None
    r"""Blocked AV threats count"""

    failed_os_patches_count: Annotated[
        Optional[int], pydantic.Field(alias="failedOSPatchesCount")
    ] = None
    r"""Number of failed OS patches"""

    pending_os_patches_count: Annotated[
        Optional[int], pydantic.Field(alias="pendingOSPatchesCount")
    ] = None
    r"""Number of pending OS patches"""

    alert_count: Annotated[Optional[int], pydantic.Field(alias="alertCount")] = None
    r"""Alerts count"""

    active_job_count: Annotated[
        Optional[int], pydantic.Field(alias="activeJobCount")
    ] = None
    r"""Alerts job count"""

    failed_software_patches_count: Annotated[
        Optional[int], pydantic.Field(alias="failedSoftwarePatchesCount")
    ] = None
    r"""Number of failed software patches"""

    pending_software_patches_count: Annotated[
        Optional[int], pydantic.Field(alias="pendingSoftwarePatchesCount")
    ] = None
    r"""Number of pending software patches"""

    pending_reboot_reason: Annotated[
        Optional[str], pydantic.Field(alias="pendingRebootReason")
    ] = None
    r"""Pending reboot reasons"""

    av_install_status: Annotated[
        Optional[AvInstallStatus], pydantic.Field(alias="avInstallStatus")
    ] = None
    r"""Antivirus installation status"""

    products_installation_statuses: Annotated[
        Optional[Dict[str, ProductsInstallationStatuses]],
        pydantic.Field(alias="productsInstallationStatuses"),
    ] = None
    r"""Integrated products' installation statuses"""

    offline: Optional[bool] = None
    r"""Is device offline?"""

    parent_device_id: Annotated[
        Optional[int], pydantic.Field(alias="parentDeviceId")
    ] = None
    r"""Parent device identifier"""

    parent_offline: Annotated[Optional[bool], pydantic.Field(alias="parentOffline")] = (
        None
    )
    r"""Is parent device offline"""

    health_status: Annotated[
        Optional[HealthStatus], pydantic.Field(alias="healthStatus")
    ] = None
    r"""Health status"""

    installation_issues_count: Annotated[
        Optional[int], pydantic.Field(alias="installationIssuesCount")
    ] = None

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device identifier"""


class GetDeviceHealthReportResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetDeviceHealthReportCursorTypedDict]
    results: NotRequired[List[GetDeviceHealthReportResultsTypedDict]]


class GetDeviceHealthReportResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetDeviceHealthReportCursor] = None

    results: Optional[List[GetDeviceHealthReportResults]] = None

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSoftwareRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter"""
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]
    r"""Limit number of records per page"""
    installed_before: NotRequired[str]
    r"""Include software installed before specified date"""
    installed_after: NotRequired[str]
    r"""Include software installed after specified date"""


class GetSoftwareRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit number of records per page"""

    installed_before: Annotated[
        Optional[str],
        pydantic.Field(alias="installedBefore"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include software installed before specified date"""

    installed_after: Annotated[
        Optional[str],
        pydantic.Field(alias="installedAfter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include software installed after specified date"""


class GetSoftwareCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetSoftwareCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class GetSoftwareResultsTypedDict(TypedDict):
    install_date: NotRequired[datetime]
    r"""Installation Date"""
    location: NotRequired[str]
    r"""Location"""
    name: NotRequired[str]
    r"""Product Name"""
    publisher: NotRequired[str]
    r"""Publisher"""
    size: NotRequired[int]
    r"""Size on disk"""
    version: NotRequired[str]
    r"""Version"""
    product_code: NotRequired[str]
    r"""Product Code"""
    device_id: NotRequired[int]
    r"""Device identifier"""
    timestamp: NotRequired[float]
    r"""Date/Time when data was collected/updated"""


class GetSoftwareResults(BaseModel):
    install_date: Annotated[Optional[datetime], pydantic.Field(alias="installDate")] = (
        None
    )
    r"""Installation Date"""

    location: Optional[str] = None
    r"""Location"""

    name: Optional[str] = None
    r"""Product Name"""

    publisher: Optional[str] = None
    r"""Publisher"""

    size: Optional[int] = None
    r"""Size on disk"""

    version: Optional[str] = None
    r"""Version"""

    product_code: Annotated[Optional[str], pydantic.Field(alias="productCode")] = None
    r"""Product Code"""

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device identifier"""

    timestamp: Optional[float] = None
    r"""Date/Time when data was collected/updated"""


class GetSoftwareResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetSoftwareCursorTypedDict]
    results: NotRequired[List[GetSoftwareResultsTypedDict]]


class GetSoftwareResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetSoftwareCursor] = None

    results: Optional[List[GetSoftwareResults]] = None

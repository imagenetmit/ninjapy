"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from ninjapy.types import BaseModel
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BodyPartContentDispositionTypedDict(TypedDict):
    type: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    file_name: NotRequired[str]
    creation_date: NotRequired[datetime]
    modification_date: NotRequired[datetime]
    read_date: NotRequired[datetime]
    size: NotRequired[int]


class BodyPartContentDisposition(BaseModel):
    type: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    creation_date: Annotated[
        Optional[datetime], pydantic.Field(alias="creationDate")
    ] = None

    modification_date: Annotated[
        Optional[datetime], pydantic.Field(alias="modificationDate")
    ] = None

    read_date: Annotated[Optional[datetime], pydantic.Field(alias="readDate")] = None

    size: Optional[int] = None


class BodyPartEntityTypedDict(TypedDict):
    pass


class BodyPartEntity(BaseModel):
    pass


class BodyPartMediaTypeTypedDict(TypedDict):
    type: NotRequired[str]
    subtype: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]
    wildcard_type: NotRequired[bool]
    wildcard_subtype: NotRequired[bool]


class BodyPartMediaType(BaseModel):
    type: Optional[str] = None

    subtype: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None

    wildcard_type: Annotated[Optional[bool], pydantic.Field(alias="wildcardType")] = (
        None
    )

    wildcard_subtype: Annotated[
        Optional[bool], pydantic.Field(alias="wildcardSubtype")
    ] = None


class BodyPartMessageBodyWorkersTypedDict(TypedDict):
    pass


class BodyPartMessageBodyWorkers(BaseModel):
    pass


class BodyPartProvidersTypedDict(TypedDict):
    pass


class BodyPartProviders(BaseModel):
    pass


class ParameterizedHeadersTypedDict(TypedDict):
    value: NotRequired[str]
    parameters: NotRequired[Dict[str, str]]


class ParameterizedHeaders(BaseModel):
    value: Optional[str] = None

    parameters: Optional[Dict[str, str]] = None


class BodyPartTypedDict(TypedDict):
    content_disposition: NotRequired[BodyPartContentDispositionTypedDict]
    entity: NotRequired[BodyPartEntityTypedDict]
    headers: NotRequired[Dict[str, List[str]]]
    media_type: NotRequired[BodyPartMediaTypeTypedDict]
    message_body_workers: NotRequired[BodyPartMessageBodyWorkersTypedDict]
    parent: NotRequired["MultiPartTypedDict"]
    providers: NotRequired[BodyPartProvidersTypedDict]
    parameterized_headers: NotRequired[Dict[str, List[ParameterizedHeadersTypedDict]]]


class BodyPart(BaseModel):
    content_disposition: Annotated[
        Optional[BodyPartContentDisposition], pydantic.Field(alias="contentDisposition")
    ] = None

    entity: Optional[BodyPartEntity] = None

    headers: Optional[Dict[str, List[str]]] = None

    media_type: Annotated[
        Optional[BodyPartMediaType], pydantic.Field(alias="mediaType")
    ] = None

    message_body_workers: Annotated[
        Optional[BodyPartMessageBodyWorkers], pydantic.Field(alias="messageBodyWorkers")
    ] = None

    parent: Optional["MultiPart"] = None

    providers: Optional[BodyPartProviders] = None

    parameterized_headers: Annotated[
        Optional[Dict[str, List[ParameterizedHeaders]]],
        pydantic.Field(alias="parameterizedHeaders"),
    ] = None

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateDescriptionTypedDict(TypedDict):
    public: NotRequired[bool]
    body: NotRequired[Nullable[str]]
    html_body: NotRequired[Nullable[str]]
    time_tracked: NotRequired[Nullable[int]]
    r"""time in seconds"""
    duplicate_in_incidents: NotRequired[bool]


class CreateDescription(BaseModel):
    public: Optional[bool] = True

    body: OptionalNullable[str] = UNSET

    html_body: Annotated[OptionalNullable[str], pydantic.Field(alias="htmlBody")] = (
        UNSET
    )

    time_tracked: Annotated[
        OptionalNullable[int], pydantic.Field(alias="timeTracked")
    ] = UNSET
    r"""time in seconds"""

    duplicate_in_incidents: Annotated[
        Optional[bool], pydantic.Field(alias="duplicateInIncidents")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "public",
            "body",
            "htmlBody",
            "timeTracked",
            "duplicateInIncidents",
        ]
        nullable_fields = ["body", "htmlBody", "timeTracked"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateType(str, Enum):
    r"""Type of ticket"""

    PROBLEM = "PROBLEM"
    QUESTION = "QUESTION"
    INCIDENT = "INCIDENT"
    TASK = "TASK"


class CcTypedDict(TypedDict):
    uids: NotRequired[Nullable[List[Nullable[str]]]]
    r"""List of user uids to be carbon-copied"""
    emails: NotRequired[Nullable[List[Nullable[str]]]]
    r"""emails"""


class Cc(BaseModel):
    uids: OptionalNullable[List[Nullable[str]]] = UNSET
    r"""List of user uids to be carbon-copied"""

    emails: OptionalNullable[List[Nullable[str]]] = UNSET
    r"""emails"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["uids", "emails"]
        nullable_fields = ["uids", "emails"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateSeverity(str, Enum):
    NONE = "NONE"
    MINOR = "MINOR"
    MODERATE = "MODERATE"
    MAJOR = "MAJOR"
    CRITICAL = "CRITICAL"


class CreatePriority(str, Enum):
    NONE = "NONE"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class AttributesTypedDict(TypedDict):
    attribute_id: int
    r"""Attribute identifier"""
    value: str
    r"""Attribute value"""
    id: NotRequired[Nullable[int]]


class Attributes(BaseModel):
    attribute_id: Annotated[int, pydantic.Field(alias="attributeId")]
    r"""Attribute identifier"""

    value: str
    r"""Attribute value"""

    id: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["id"]
        nullable_fields = ["id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateRequestBodyTypedDict(TypedDict):
    r"""NewTicket object that needs to be added to the store"""

    client_id: int
    r"""Client (Organization) identifier"""
    ticket_form_id: int
    r"""Ticket form identifier"""
    subject: str
    location_id: NotRequired[Nullable[int]]
    r"""Location identifier"""
    node_id: NotRequired[Nullable[int]]
    r"""Device identifier"""
    description: NotRequired[CreateDescriptionTypedDict]
    status: NotRequired[str]
    type: NotRequired[Nullable[CreateType]]
    r"""Type of ticket"""
    cc: NotRequired[Nullable[CcTypedDict]]
    assigned_app_user_id: NotRequired[Nullable[int]]
    requester_uid: NotRequired[str]
    severity: NotRequired[Nullable[CreateSeverity]]
    priority: NotRequired[Nullable[CreatePriority]]
    parent_ticket_id: NotRequired[Nullable[int]]
    r"""Ticket parent identifier"""
    tags: NotRequired[Nullable[List[Nullable[str]]]]
    attributes: NotRequired[Nullable[List[Nullable[AttributesTypedDict]]]]


class CreateRequestBody(BaseModel):
    r"""NewTicket object that needs to be added to the store"""

    client_id: Annotated[int, pydantic.Field(alias="clientId")]
    r"""Client (Organization) identifier"""

    ticket_form_id: Annotated[int, pydantic.Field(alias="ticketFormId")]
    r"""Ticket form identifier"""

    subject: str

    location_id: Annotated[
        OptionalNullable[int], pydantic.Field(alias="locationId")
    ] = UNSET
    r"""Location identifier"""

    node_id: Annotated[OptionalNullable[int], pydantic.Field(alias="nodeId")] = UNSET
    r"""Device identifier"""

    description: Optional[CreateDescription] = None

    status: Optional[str] = "1000"

    type: OptionalNullable[CreateType] = UNSET
    r"""Type of ticket"""

    cc: OptionalNullable[Cc] = UNSET

    assigned_app_user_id: Annotated[
        OptionalNullable[int], pydantic.Field(alias="assignedAppUserId")
    ] = UNSET

    requester_uid: Annotated[Optional[str], pydantic.Field(alias="requesterUid")] = None

    severity: OptionalNullable[CreateSeverity] = CreateSeverity.NONE

    priority: OptionalNullable[CreatePriority] = CreatePriority.NONE

    parent_ticket_id: Annotated[
        OptionalNullable[int], pydantic.Field(alias="parentTicketId")
    ] = UNSET
    r"""Ticket parent identifier"""

    tags: OptionalNullable[List[Nullable[str]]] = UNSET

    attributes: OptionalNullable[List[Nullable[Attributes]]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "locationId",
            "nodeId",
            "description",
            "status",
            "type",
            "cc",
            "assignedAppUserId",
            "requesterUid",
            "severity",
            "priority",
            "parentTicketId",
            "tags",
            "attributes",
        ]
        nullable_fields = [
            "locationId",
            "nodeId",
            "type",
            "cc",
            "assignedAppUserId",
            "severity",
            "priority",
            "parentTicketId",
            "tags",
            "attributes",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class StatusTypedDict(TypedDict):
    name: NotRequired[str]
    display_name: NotRequired[str]
    parent_id: NotRequired[int]
    status_id: NotRequired[int]


class Status(BaseModel):
    name: Optional[str] = None

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None

    parent_id: Annotated[Optional[int], pydantic.Field(alias="parentId")] = None

    status_id: Annotated[Optional[int], pydantic.Field(alias="statusId")] = None


class CreateTicketingType(str, Enum):
    PROBLEM = "PROBLEM"
    QUESTION = "QUESTION"
    INCIDENT = "INCIDENT"
    TASK = "TASK"


class CreateTicketingPriority(str, Enum):
    NONE = "NONE"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class CreateTicketingSeverity(str, Enum):
    NONE = "NONE"
    MINOR = "MINOR"
    MODERATE = "MODERATE"
    MAJOR = "MAJOR"
    CRITICAL = "CRITICAL"


class Source(str, Enum):
    TECHNICIAN = "TECHNICIAN"
    EMAIL = "EMAIL"
    WEB_FORM = "WEB_FORM"
    HELP_REQUEST = "HELP_REQUEST"
    END_USER = "END_USER"
    CONDITION = "CONDITION"
    SCHEDULED_SCRIPT = "SCHEDULED_SCRIPT"
    ACTIVITY = "ACTIVITY"


class CcListTypedDict(TypedDict):
    uids: NotRequired[List[str]]
    emails: NotRequired[List[str]]


class CcList(BaseModel):
    uids: Optional[List[str]] = None

    emails: Optional[List[str]] = None


class CreateValueTypedDict(TypedDict):
    pass


class CreateValue(BaseModel):
    pass


class AttributeValuesTypedDict(TypedDict):
    id: NotRequired[int]
    attribute_id: NotRequired[int]
    value: NotRequired[CreateValueTypedDict]


class AttributeValues(BaseModel):
    id: Optional[int] = None

    attribute_id: Annotated[Optional[int], pydantic.Field(alias="attributeId")] = None

    value: Optional[CreateValue] = None


class CreateResponseBodyTypedDict(TypedDict):
    r"""default response"""

    id: NotRequired[int]
    version: NotRequired[int]
    node_id: NotRequired[int]
    client_id: NotRequired[int]
    location_id: NotRequired[int]
    assigned_app_user_id: NotRequired[int]
    requester_uid: NotRequired[str]
    subject: NotRequired[str]
    status: NotRequired[StatusTypedDict]
    type: NotRequired[CreateTicketingType]
    priority: NotRequired[CreateTicketingPriority]
    severity: NotRequired[CreateTicketingSeverity]
    ticket_form_id: NotRequired[int]
    source: NotRequired[Source]
    tags: NotRequired[List[str]]
    cc_list: NotRequired[CcListTypedDict]
    create_time: NotRequired[float]
    deleted: NotRequired[bool]
    attribute_values: NotRequired[List[AttributeValuesTypedDict]]


class CreateResponseBody(BaseModel):
    r"""default response"""

    id: Optional[int] = None

    version: Optional[int] = None

    node_id: Annotated[Optional[int], pydantic.Field(alias="nodeId")] = None

    client_id: Annotated[Optional[int], pydantic.Field(alias="clientId")] = None

    location_id: Annotated[Optional[int], pydantic.Field(alias="locationId")] = None

    assigned_app_user_id: Annotated[
        Optional[int], pydantic.Field(alias="assignedAppUserId")
    ] = None

    requester_uid: Annotated[Optional[str], pydantic.Field(alias="requesterUid")] = None

    subject: Optional[str] = None

    status: Optional[Status] = None

    type: Optional[CreateTicketingType] = None

    priority: Optional[CreateTicketingPriority] = None

    severity: Optional[CreateTicketingSeverity] = None

    ticket_form_id: Annotated[Optional[int], pydantic.Field(alias="ticketFormId")] = (
        None
    )

    source: Optional[Source] = None

    tags: Optional[List[str]] = None

    cc_list: Annotated[Optional[CcList], pydantic.Field(alias="ccList")] = None

    create_time: Annotated[Optional[float], pydantic.Field(alias="createTime")] = None

    deleted: Optional[bool] = None

    attribute_values: Annotated[
        Optional[List[AttributeValues]], pydantic.Field(alias="attributeValues")
    ] = None

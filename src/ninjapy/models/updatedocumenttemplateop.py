"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import io
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import IO, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateDocumentTemplateRequestTypedDict(TypedDict):
    document_template_id: int
    request_body: NotRequired[Union[bytes, IO[bytes], io.BufferedReader]]


class UpdateDocumentTemplateRequest(BaseModel):
    document_template_id: Annotated[
        int,
        pydantic.Field(alias="documentTemplateId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    request_body: Annotated[
        Optional[Union[bytes, IO[bytes], io.BufferedReader]],
        FieldMetadata(request=RequestMetadata(media_type="*/*")),
    ] = None


class UpdateDocumentTemplateDocumentTemplatesFieldType(str, Enum):
    r"""Field type"""

    DROPDOWN = "DROPDOWN"
    MULTI_SELECT = "MULTI_SELECT"
    CHECKBOX = "CHECKBOX"
    TEXT = "TEXT"
    TEXT_MULTILINE = "TEXT_MULTILINE"
    TEXT_ENCRYPTED = "TEXT_ENCRYPTED"
    NUMERIC = "NUMERIC"
    DECIMAL = "DECIMAL"
    DATE = "DATE"
    DATE_TIME = "DATE_TIME"
    TIME = "TIME"
    ATTACHMENT = "ATTACHMENT"
    NODE_DROPDOWN = "NODE_DROPDOWN"
    NODE_MULTI_SELECT = "NODE_MULTI_SELECT"
    CLIENT_DROPDOWN = "CLIENT_DROPDOWN"
    CLIENT_MULTI_SELECT = "CLIENT_MULTI_SELECT"
    CLIENT_LOCATION_DROPDOWN = "CLIENT_LOCATION_DROPDOWN"
    CLIENT_LOCATION_MULTI_SELECT = "CLIENT_LOCATION_MULTI_SELECT"
    CLIENT_DOCUMENT_DROPDOWN = "CLIENT_DOCUMENT_DROPDOWN"
    CLIENT_DOCUMENT_MULTI_SELECT = "CLIENT_DOCUMENT_MULTI_SELECT"
    EMAIL = "EMAIL"
    PHONE = "PHONE"
    IP_ADDRESS = "IP_ADDRESS"
    WYSIWYG = "WYSIWYG"
    URL = "URL"


class UpdateDocumentTemplateDocumentTemplatesFieldTechnicianPermission(str, Enum):
    r"""Field technician permission"""

    NONE = "NONE"
    EDITABLE = "EDITABLE"
    READ_ONLY = "READ_ONLY"


class UpdateDocumentTemplateDocumentTemplatesFieldScriptPermission(str, Enum):
    r"""Field script permission"""

    NONE = "NONE"
    READ_ONLY = "READ_ONLY"
    WRITE_ONLY = "WRITE_ONLY"
    READ_WRITE = "READ_WRITE"


class UpdateDocumentTemplateDocumentTemplatesFieldAPIPermission(str, Enum):
    r"""Field public API permission"""

    NONE = "NONE"
    READ_ONLY = "READ_ONLY"
    WRITE_ONLY = "WRITE_ONLY"
    READ_WRITE = "READ_WRITE"


class UpdateDocumentTemplateDocumentTemplatesValuesTypedDict(TypedDict):
    r"""Used for dropdown options"""

    id: NotRequired[str]
    r"""Identifier"""
    name: NotRequired[str]
    r"""Dropdown option name"""
    active: NotRequired[bool]
    r"""Indicates if a dropdown option is active"""


class UpdateDocumentTemplateDocumentTemplatesValues(BaseModel):
    r"""Used for dropdown options"""

    id: Optional[str] = None
    r"""Identifier"""

    name: Optional[str] = None
    r"""Dropdown option name"""

    active: Optional[bool] = None
    r"""Indicates if a dropdown option is active"""


class UpdateDocumentTemplateDocumentTemplatesType(str, Enum):
    NONE = "NONE"
    INCLUDE = "INCLUDE"
    EXCLUDE = "EXCLUDE"
    PAST_DATES_ONLY = "PAST_DATES_ONLY"
    FUTURE_DATES_ONLY = "FUTURE_DATES_ONLY"
    RANGE = "RANGE"


class UpdateDocumentTemplateDocumentTemplatesDateFiltersTypedDict(TypedDict):
    type: NotRequired[UpdateDocumentTemplateDocumentTemplatesType]
    selected: NotRequired[List[str]]


class UpdateDocumentTemplateDocumentTemplatesDateFilters(BaseModel):
    type: Optional[UpdateDocumentTemplateDocumentTemplatesType] = None

    selected: Optional[List[str]] = None


class UpdateDocumentTemplateDocumentTemplatesComplexityRulesTypedDict(TypedDict):
    must_contain_one_integer: NotRequired[bool]
    must_contain_one_lowercase_letter: NotRequired[bool]
    must_contain_one_uppercase_letter: NotRequired[bool]
    greater_or_equal_than_six_characters: NotRequired[bool]


class UpdateDocumentTemplateDocumentTemplatesComplexityRules(BaseModel):
    must_contain_one_integer: Annotated[
        Optional[bool], pydantic.Field(alias="mustContainOneInteger")
    ] = None

    must_contain_one_lowercase_letter: Annotated[
        Optional[bool], pydantic.Field(alias="mustContainOneLowercaseLetter")
    ] = None

    must_contain_one_uppercase_letter: Annotated[
        Optional[bool], pydantic.Field(alias="mustContainOneUppercaseLetter")
    ] = None

    greater_or_equal_than_six_characters: Annotated[
        Optional[bool], pydantic.Field(alias="greaterOrEqualThanSixCharacters")
    ] = None


class UpdateDocumentTemplateDocumentTemplatesNumericRangeTypedDict(TypedDict):
    min: NotRequired[float]
    max: NotRequired[float]


class UpdateDocumentTemplateDocumentTemplatesNumericRange(BaseModel):
    min: Optional[float] = None

    max: Optional[float] = None


class UpdateDocumentTemplateDocumentTemplatesNodeClass(str, Enum):
    WINDOWS_SERVER = "WINDOWS_SERVER"
    WINDOWS_WORKSTATION = "WINDOWS_WORKSTATION"
    LINUX_WORKSTATION = "LINUX_WORKSTATION"
    MAC = "MAC"
    ANDROID = "ANDROID"
    APPLE_IOS = "APPLE_IOS"
    APPLE_IPADOS = "APPLE_IPADOS"
    VMWARE_VM_HOST = "VMWARE_VM_HOST"
    VMWARE_VM_GUEST = "VMWARE_VM_GUEST"
    HYPERV_VMM_HOST = "HYPERV_VMM_HOST"
    HYPERV_VMM_GUEST = "HYPERV_VMM_GUEST"
    LINUX_SERVER = "LINUX_SERVER"
    MAC_SERVER = "MAC_SERVER"
    CLOUD_MONITOR_TARGET = "CLOUD_MONITOR_TARGET"
    NMS_SWITCH = "NMS_SWITCH"
    NMS_ROUTER = "NMS_ROUTER"
    NMS_FIREWALL = "NMS_FIREWALL"
    NMS_PRIVATE_NETWORK_GATEWAY = "NMS_PRIVATE_NETWORK_GATEWAY"
    NMS_PRINTER = "NMS_PRINTER"
    NMS_SCANNER = "NMS_SCANNER"
    NMS_DIAL_MANAGER = "NMS_DIAL_MANAGER"
    NMS_WAP = "NMS_WAP"
    NMS_IPSLA = "NMS_IPSLA"
    NMS_COMPUTER = "NMS_COMPUTER"
    NMS_VM_HOST = "NMS_VM_HOST"
    NMS_APPLIANCE = "NMS_APPLIANCE"
    NMS_OTHER = "NMS_OTHER"
    NMS_SERVER = "NMS_SERVER"
    NMS_PHONE = "NMS_PHONE"
    NMS_VIRTUAL_MACHINE = "NMS_VIRTUAL_MACHINE"
    NMS_NETWORK_MANAGEMENT_AGENT = "NMS_NETWORK_MANAGEMENT_AGENT"


class UpdateDocumentTemplateDocumentTemplatesIPAddressType(str, Enum):
    ALL = "ALL"
    IPV4 = "IPV4"
    IPV6 = "IPV6"


class UpdateDocumentTemplateDocumentTemplatesAdvancedSettingsTypedDict(TypedDict):
    file_max_size: NotRequired[int]
    file_extensions: NotRequired[List[str]]
    date_filters: NotRequired[
        UpdateDocumentTemplateDocumentTemplatesDateFiltersTypedDict
    ]
    max_characters: NotRequired[int]
    complexity_rules: NotRequired[
        UpdateDocumentTemplateDocumentTemplatesComplexityRulesTypedDict
    ]
    numeric_range: NotRequired[
        UpdateDocumentTemplateDocumentTemplatesNumericRangeTypedDict
    ]
    org: NotRequired[List[int]]
    node_class: NotRequired[List[UpdateDocumentTemplateDocumentTemplatesNodeClass]]
    ip_address_type: NotRequired[UpdateDocumentTemplateDocumentTemplatesIPAddressType]
    expand_large_value_on_render: NotRequired[bool]


class UpdateDocumentTemplateDocumentTemplatesAdvancedSettings(BaseModel):
    file_max_size: Annotated[Optional[int], pydantic.Field(alias="fileMaxSize")] = None

    file_extensions: Annotated[
        Optional[List[str]], pydantic.Field(alias="fileExtensions")
    ] = None

    date_filters: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesDateFilters],
        pydantic.Field(alias="dateFilters"),
    ] = None

    max_characters: Annotated[Optional[int], pydantic.Field(alias="maxCharacters")] = (
        None
    )

    complexity_rules: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesComplexityRules],
        pydantic.Field(alias="complexityRules"),
    ] = None

    numeric_range: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesNumericRange],
        pydantic.Field(alias="numericRange"),
    ] = None

    org: Optional[List[int]] = None

    node_class: Annotated[
        Optional[List[UpdateDocumentTemplateDocumentTemplatesNodeClass]],
        pydantic.Field(alias="nodeClass"),
    ] = None

    ip_address_type: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesIPAddressType],
        pydantic.Field(alias="ipAddressType"),
    ] = None

    expand_large_value_on_render: Annotated[
        Optional[bool], pydantic.Field(alias="expandLargeValueOnRender")
    ] = None


class UpdateDocumentTemplateDocumentTemplatesFieldContentTypedDict(TypedDict):
    r"""Field content"""

    values: NotRequired[List[UpdateDocumentTemplateDocumentTemplatesValuesTypedDict]]
    r"""Used for dropdown options"""
    required: NotRequired[bool]
    r"""Indicates if the field is required"""
    footer_text: NotRequired[str]
    r"""Footer text"""
    tooltip_text: NotRequired[str]
    r"""Tooltip text"""
    advanced_settings: NotRequired[
        UpdateDocumentTemplateDocumentTemplatesAdvancedSettingsTypedDict
    ]


class UpdateDocumentTemplateDocumentTemplatesFieldContent(BaseModel):
    r"""Field content"""

    values: Optional[List[UpdateDocumentTemplateDocumentTemplatesValues]] = None
    r"""Used for dropdown options"""

    required: Optional[bool] = None
    r"""Indicates if the field is required"""

    footer_text: Annotated[Optional[str], pydantic.Field(alias="footerText")] = None
    r"""Footer text"""

    tooltip_text: Annotated[Optional[str], pydantic.Field(alias="tooltipText")] = None
    r"""Tooltip text"""

    advanced_settings: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesAdvancedSettings],
        pydantic.Field(alias="advancedSettings"),
    ] = None


class UpdateDocumentTemplateDocumentTemplatesUIElementType(str, Enum):
    r"""UI element type"""

    TITLE = "TITLE"
    DESCRIPTION = "DESCRIPTION"
    SEPARATOR = "SEPARATOR"


class UpdateDocumentTemplateDocumentTemplatesFieldsTypedDict(TypedDict):
    r"""Document template fields"""

    field_id: NotRequired[int]
    r"""Field identifier"""
    field_label: NotRequired[str]
    r"""Field or UI element name"""
    field_name: NotRequired[str]
    r"""Field name"""
    field_description: NotRequired[str]
    r"""Field description"""
    field_type: NotRequired[UpdateDocumentTemplateDocumentTemplatesFieldType]
    r"""Field type"""
    field_technician_permission: NotRequired[
        UpdateDocumentTemplateDocumentTemplatesFieldTechnicianPermission
    ]
    r"""Field technician permission"""
    field_script_permission: NotRequired[
        UpdateDocumentTemplateDocumentTemplatesFieldScriptPermission
    ]
    r"""Field script permission"""
    field_api_permission: NotRequired[
        UpdateDocumentTemplateDocumentTemplatesFieldAPIPermission
    ]
    r"""Field public API permission"""
    field_default_value: NotRequired[str]
    r"""Default value"""
    field_content: NotRequired[
        UpdateDocumentTemplateDocumentTemplatesFieldContentTypedDict
    ]
    r"""Field content"""
    ui_element_uid: NotRequired[str]
    r"""UI element identifier"""
    ui_element_name: NotRequired[str]
    r"""UI element name"""
    ui_element_type: NotRequired[UpdateDocumentTemplateDocumentTemplatesUIElementType]
    r"""UI element type"""
    ui_element_value: NotRequired[str]
    r"""UI element value"""
    created_time: NotRequired[float]
    r"""Creation time"""
    updated_time: NotRequired[float]
    r"""Last updated time"""


class UpdateDocumentTemplateDocumentTemplatesFields(BaseModel):
    r"""Document template fields"""

    field_id: Annotated[Optional[int], pydantic.Field(alias="fieldId")] = None
    r"""Field identifier"""

    field_label: Annotated[Optional[str], pydantic.Field(alias="fieldLabel")] = None
    r"""Field or UI element name"""

    field_name: Annotated[Optional[str], pydantic.Field(alias="fieldName")] = None
    r"""Field name"""

    field_description: Annotated[
        Optional[str], pydantic.Field(alias="fieldDescription")
    ] = None
    r"""Field description"""

    field_type: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesFieldType],
        pydantic.Field(alias="fieldType"),
    ] = None
    r"""Field type"""

    field_technician_permission: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesFieldTechnicianPermission],
        pydantic.Field(alias="fieldTechnicianPermission"),
    ] = None
    r"""Field technician permission"""

    field_script_permission: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesFieldScriptPermission],
        pydantic.Field(alias="fieldScriptPermission"),
    ] = None
    r"""Field script permission"""

    field_api_permission: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesFieldAPIPermission],
        pydantic.Field(alias="fieldApiPermission"),
    ] = None
    r"""Field public API permission"""

    field_default_value: Annotated[
        Optional[str], pydantic.Field(alias="fieldDefaultValue")
    ] = None
    r"""Default value"""

    field_content: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesFieldContent],
        pydantic.Field(alias="fieldContent"),
    ] = None
    r"""Field content"""

    ui_element_uid: Annotated[Optional[str], pydantic.Field(alias="uiElementUid")] = (
        None
    )
    r"""UI element identifier"""

    ui_element_name: Annotated[Optional[str], pydantic.Field(alias="uiElementName")] = (
        None
    )
    r"""UI element name"""

    ui_element_type: Annotated[
        Optional[UpdateDocumentTemplateDocumentTemplatesUIElementType],
        pydantic.Field(alias="uiElementType"),
    ] = None
    r"""UI element type"""

    ui_element_value: Annotated[
        Optional[str], pydantic.Field(alias="uiElementValue")
    ] = None
    r"""UI element value"""

    created_time: Annotated[Optional[float], pydantic.Field(alias="createdTime")] = None
    r"""Creation time"""

    updated_time: Annotated[Optional[float], pydantic.Field(alias="updatedTime")] = None
    r"""Last updated time"""


class UpdateDocumentTemplateArchivedByTypedDict(TypedDict):
    r"""Indicates who archived the template"""

    id: NotRequired[int]
    display_name: NotRequired[str]
    deleted: NotRequired[bool]


class UpdateDocumentTemplateArchivedBy(BaseModel):
    r"""Indicates who archived the template"""

    id: Optional[int] = None

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None

    deleted: Optional[bool] = None


class UpdateDocumentTemplateResponseBodyTypedDict(TypedDict):
    r"""Returns the document template updated"""

    id: NotRequired[int]
    r"""Identifier"""
    name: NotRequired[str]
    r"""Name of the template (must be unique)"""
    description: NotRequired[str]
    r"""Description of the template"""
    allow_multiple: NotRequired[bool]
    r"""Indicates if multiple instances of the document template is allowed"""
    mandatory: NotRequired[bool]
    r"""Indicates if the document template is mandatory"""
    create_time: NotRequired[float]
    r"""Creation time"""
    update_time: NotRequired[float]
    r"""Last updated time"""
    fields: NotRequired[List[UpdateDocumentTemplateDocumentTemplatesFieldsTypedDict]]
    r"""Document template fields"""
    available_to_all_technicians: NotRequired[bool]
    r"""Indicates if the document template is available to all technicians"""
    allowed_technician_roles: NotRequired[List[int]]
    r"""List of allowed technician role ids"""
    archived: NotRequired[bool]
    r"""Indicates if the document template is archived"""
    archived_time: NotRequired[float]
    r"""Indicates the time the template was archived"""
    archived_by: NotRequired[UpdateDocumentTemplateArchivedByTypedDict]
    r"""Indicates who archived the template"""


class UpdateDocumentTemplateResponseBody(BaseModel):
    r"""Returns the document template updated"""

    id: Optional[int] = None
    r"""Identifier"""

    name: Optional[str] = None
    r"""Name of the template (must be unique)"""

    description: Optional[str] = None
    r"""Description of the template"""

    allow_multiple: Annotated[Optional[bool], pydantic.Field(alias="allowMultiple")] = (
        None
    )
    r"""Indicates if multiple instances of the document template is allowed"""

    mandatory: Optional[bool] = None
    r"""Indicates if the document template is mandatory"""

    create_time: Annotated[Optional[float], pydantic.Field(alias="createTime")] = None
    r"""Creation time"""

    update_time: Annotated[Optional[float], pydantic.Field(alias="updateTime")] = None
    r"""Last updated time"""

    fields: Optional[List[UpdateDocumentTemplateDocumentTemplatesFields]] = None
    r"""Document template fields"""

    available_to_all_technicians: Annotated[
        Optional[bool], pydantic.Field(alias="availableToAllTechnicians")
    ] = None
    r"""Indicates if the document template is available to all technicians"""

    allowed_technician_roles: Annotated[
        Optional[List[int]], pydantic.Field(alias="allowedTechnicianRoles")
    ] = None
    r"""List of allowed technician role ids"""

    archived: Optional[bool] = None
    r"""Indicates if the document template is archived"""

    archived_time: Annotated[Optional[float], pydantic.Field(alias="archivedTime")] = (
        None
    )
    r"""Indicates the time the template was archived"""

    archived_by: Annotated[
        Optional[UpdateDocumentTemplateArchivedBy], pydantic.Field(alias="archivedBy")
    ] = None
    r"""Indicates who archived the template"""

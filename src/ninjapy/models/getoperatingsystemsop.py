"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetOperatingSystemsRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter"""
    ts: NotRequired[str]
    r"""Monitoring timestamp filter"""
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]
    r"""Limit number of records per page"""


class GetOperatingSystemsRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter"""

    ts: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Monitoring timestamp filter"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit number of records per page"""


class GetOperatingSystemsCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetOperatingSystemsCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class GetOperatingSystemsResultsTypedDict(TypedDict):
    manufacturer: NotRequired[str]
    r"""Manufacturer"""
    name: NotRequired[str]
    r"""Name"""
    architecture: NotRequired[str]
    r"""Architecture"""
    last_boot_time: NotRequired[float]
    r"""Last boot time"""
    build_number: NotRequired[str]
    r"""Build number"""
    release_id: NotRequired[str]
    r"""Release ID"""
    service_pack_major_version: NotRequired[int]
    r"""Service Pack Major Version"""
    service_pack_minor_version: NotRequired[int]
    r"""Service Pack Minor Version"""
    locale: NotRequired[str]
    r"""Locale"""
    language: NotRequired[str]
    r"""Language"""
    needs_reboot: NotRequired[bool]
    r"""Operating system has pending reboot requests"""
    device_id: NotRequired[int]
    r"""Device identifier"""
    timestamp: NotRequired[float]
    r"""Date/Time when data was collected/updated"""


class GetOperatingSystemsResults(BaseModel):
    manufacturer: Optional[str] = None
    r"""Manufacturer"""

    name: Optional[str] = None
    r"""Name"""

    architecture: Optional[str] = None
    r"""Architecture"""

    last_boot_time: Annotated[Optional[float], pydantic.Field(alias="lastBootTime")] = (
        None
    )
    r"""Last boot time"""

    build_number: Annotated[Optional[str], pydantic.Field(alias="buildNumber")] = None
    r"""Build number"""

    release_id: Annotated[Optional[str], pydantic.Field(alias="releaseId")] = None
    r"""Release ID"""

    service_pack_major_version: Annotated[
        Optional[int], pydantic.Field(alias="servicePackMajorVersion")
    ] = None
    r"""Service Pack Major Version"""

    service_pack_minor_version: Annotated[
        Optional[int], pydantic.Field(alias="servicePackMinorVersion")
    ] = None
    r"""Service Pack Minor Version"""

    locale: Optional[str] = None
    r"""Locale"""

    language: Optional[str] = None
    r"""Language"""

    needs_reboot: Annotated[Optional[bool], pydantic.Field(alias="needsReboot")] = None
    r"""Operating system has pending reboot requests"""

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device identifier"""

    timestamp: Optional[float] = None
    r"""Date/Time when data was collected/updated"""


class GetOperatingSystemsResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetOperatingSystemsCursorTypedDict]
    results: NotRequired[List[GetOperatingSystemsResultsTypedDict]]


class GetOperatingSystemsResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetOperatingSystemsCursor] = None

    results: Optional[List[GetOperatingSystemsResults]] = None

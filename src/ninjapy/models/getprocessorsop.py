"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetProcessorsRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter"""
    ts: NotRequired[str]
    r"""Monitoring timestamp filter"""
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]
    r"""Limit number of records per page"""


class GetProcessorsRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter"""

    ts: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Monitoring timestamp filter"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit number of records per page"""


class GetProcessorsCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetProcessorsCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class GetProcessorsResultsTypedDict(TypedDict):
    architecture: NotRequired[str]
    r"""Architecture"""
    max_clock_speed: NotRequired[int]
    r"""Max Clock Speed"""
    clock_speed: NotRequired[int]
    r"""Current Clock Speed"""
    name: NotRequired[str]
    r"""Name"""
    num_cores: NotRequired[int]
    r"""Number of Cores"""
    num_logical_cores: NotRequired[int]
    r"""Number of Logical Cores]"""
    device_id: NotRequired[int]
    r"""Device identifier"""
    timestamp: NotRequired[float]
    r"""Date/Time when data was collected/updated"""


class GetProcessorsResults(BaseModel):
    architecture: Optional[str] = None
    r"""Architecture"""

    max_clock_speed: Annotated[Optional[int], pydantic.Field(alias="maxClockSpeed")] = (
        None
    )
    r"""Max Clock Speed"""

    clock_speed: Annotated[Optional[int], pydantic.Field(alias="clockSpeed")] = None
    r"""Current Clock Speed"""

    name: Optional[str] = None
    r"""Name"""

    num_cores: Annotated[Optional[int], pydantic.Field(alias="numCores")] = None
    r"""Number of Cores"""

    num_logical_cores: Annotated[
        Optional[int], pydantic.Field(alias="numLogicalCores")
    ] = None
    r"""Number of Logical Cores]"""

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device identifier"""

    timestamp: Optional[float] = None
    r"""Date/Time when data was collected/updated"""


class GetProcessorsResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetProcessorsCursorTypedDict]
    results: NotRequired[List[GetProcessorsResultsTypedDict]]


class GetProcessorsResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetProcessorsCursor] = None

    results: Optional[List[GetProcessorsResults]] = None

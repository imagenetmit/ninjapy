"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetComputerSystemsRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter"""
    ts: NotRequired[str]
    r"""Monitoring timestamp filter"""
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]
    r"""Limit number of records per page"""


class GetComputerSystemsRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter"""

    ts: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Monitoring timestamp filter"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit number of records per page"""


class GetComputerSystemsCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetComputerSystemsCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class GetComputerSystemsResultsTypedDict(TypedDict):
    name: NotRequired[str]
    r"""Name"""
    manufacturer: NotRequired[str]
    r"""Manufacturer"""
    model: NotRequired[str]
    r"""Model"""
    bios_serial_number: NotRequired[str]
    r"""Bios Serial Number"""
    serial_number: NotRequired[str]
    r"""Serial Number"""
    domain: NotRequired[str]
    domain_role: NotRequired[str]
    number_of_processors: NotRequired[int]
    total_physical_memory: NotRequired[int]
    virtual_machine: NotRequired[bool]
    chassis_type: NotRequired[str]
    device_id: NotRequired[int]
    r"""Device identifier"""
    timestamp: NotRequired[float]
    r"""Date/Time when data was collected/updated"""


class GetComputerSystemsResults(BaseModel):
    name: Optional[str] = None
    r"""Name"""

    manufacturer: Optional[str] = None
    r"""Manufacturer"""

    model: Optional[str] = None
    r"""Model"""

    bios_serial_number: Annotated[
        Optional[str], pydantic.Field(alias="biosSerialNumber")
    ] = None
    r"""Bios Serial Number"""

    serial_number: Annotated[Optional[str], pydantic.Field(alias="serialNumber")] = None
    r"""Serial Number"""

    domain: Optional[str] = None

    domain_role: Annotated[Optional[str], pydantic.Field(alias="domainRole")] = None

    number_of_processors: Annotated[
        Optional[int], pydantic.Field(alias="numberOfProcessors")
    ] = None

    total_physical_memory: Annotated[
        Optional[int], pydantic.Field(alias="totalPhysicalMemory")
    ] = None

    virtual_machine: Annotated[
        Optional[bool], pydantic.Field(alias="virtualMachine")
    ] = None

    chassis_type: Annotated[Optional[str], pydantic.Field(alias="chassisType")] = None

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device identifier"""

    timestamp: Optional[float] = None
    r"""Date/Time when data was collected/updated"""


class GetComputerSystemsResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetComputerSystemsCursorTypedDict]
    results: NotRequired[List[GetComputerSystemsResultsTypedDict]]


class GetComputerSystemsResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetComputerSystemsCursor] = None

    results: Optional[List[GetComputerSystemsResults]] = None

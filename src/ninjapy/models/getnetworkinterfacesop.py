"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetNetworkInterfacesRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter"""
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]


class GetNetworkInterfacesRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class GetNetworkInterfacesCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetNetworkInterfacesCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class GetNetworkInterfacesResultsTypedDict(TypedDict):
    adapter_name: NotRequired[str]
    r"""Adapter Name"""
    default_gateway: NotRequired[str]
    r"""Default Gateway"""
    interface_type: NotRequired[str]
    r"""Interface Type"""
    dns_host_name: NotRequired[str]
    r"""DNS HostName"""
    dns_servers: NotRequired[str]
    r"""DNS Servers"""
    interface_index: NotRequired[str]
    r"""Interface Index"""
    interface_name: NotRequired[str]
    r"""Interface Name"""
    ip_address: NotRequired[List[str]]
    r"""IP Address"""
    link_speed: NotRequired[str]
    r"""Link Speed"""
    mac_address: NotRequired[List[str]]
    r"""MAC Address"""
    mtu: NotRequired[str]
    r"""MTU"""
    status: NotRequired[str]
    r"""Status"""
    subnet_mask: NotRequired[str]
    r"""Subnet Mask"""
    device_id: NotRequired[int]
    r"""Device identifier"""


class GetNetworkInterfacesResults(BaseModel):
    adapter_name: Annotated[Optional[str], pydantic.Field(alias="adapterName")] = None
    r"""Adapter Name"""

    default_gateway: Annotated[
        Optional[str], pydantic.Field(alias="defaultGateway")
    ] = None
    r"""Default Gateway"""

    interface_type: Annotated[Optional[str], pydantic.Field(alias="interfaceType")] = (
        None
    )
    r"""Interface Type"""

    dns_host_name: Annotated[Optional[str], pydantic.Field(alias="dnsHostName")] = None
    r"""DNS HostName"""

    dns_servers: Annotated[Optional[str], pydantic.Field(alias="dnsServers")] = None
    r"""DNS Servers"""

    interface_index: Annotated[
        Optional[str], pydantic.Field(alias="interfaceIndex")
    ] = None
    r"""Interface Index"""

    interface_name: Annotated[Optional[str], pydantic.Field(alias="interfaceName")] = (
        None
    )
    r"""Interface Name"""

    ip_address: Annotated[Optional[List[str]], pydantic.Field(alias="ipAddress")] = None
    r"""IP Address"""

    link_speed: Annotated[Optional[str], pydantic.Field(alias="linkSpeed")] = None
    r"""Link Speed"""

    mac_address: Annotated[Optional[List[str]], pydantic.Field(alias="macAddress")] = (
        None
    )
    r"""MAC Address"""

    mtu: Optional[str] = None
    r"""MTU"""

    status: Optional[str] = None
    r"""Status"""

    subnet_mask: Annotated[Optional[str], pydantic.Field(alias="subnetMask")] = None
    r"""Subnet Mask"""

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device identifier"""


class GetNetworkInterfacesResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetNetworkInterfacesCursorTypedDict]
    results: NotRequired[List[GetNetworkInterfacesResultsTypedDict]]


class GetNetworkInterfacesResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetNetworkInterfacesCursor] = None

    results: Optional[List[GetNetworkInterfacesResults]] = None

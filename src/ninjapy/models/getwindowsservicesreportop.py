"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from ninjapy.types import BaseModel
from ninjapy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class QueryParamState(str, Enum):
    r"""Service state"""

    UNKNOWN = "UNKNOWN"
    STOPPED = "STOPPED"
    START_PENDING = "START_PENDING"
    RUNNING = "RUNNING"
    STOP_PENDING = "STOP_PENDING"
    PAUSE_PENDING = "PAUSE_PENDING"
    PAUSED = "PAUSED"
    CONTINUE_PENDING = "CONTINUE_PENDING"


class GetWindowsServicesReportRequestTypedDict(TypedDict):
    df: NotRequired[str]
    r"""Device filter"""
    name: NotRequired[str]
    r"""Service name"""
    state: NotRequired[QueryParamState]
    r"""Service state"""
    cursor: NotRequired[str]
    r"""Cursor name"""
    page_size: NotRequired[int]
    r"""Limit number of records per page"""


class GetWindowsServicesReportRequest(BaseModel):
    df: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Device filter"""

    name: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Service name"""

    state: Annotated[
        Optional[QueryParamState],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Service state"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor name"""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1000
    r"""Limit number of records per page"""


class GetWindowsServicesReportCursorTypedDict(TypedDict):
    name: NotRequired[str]
    offset: NotRequired[int]
    count: NotRequired[int]
    expires: NotRequired[float]


class GetWindowsServicesReportCursor(BaseModel):
    name: Optional[str] = None

    offset: Optional[int] = None

    count: Optional[int] = None

    expires: Optional[float] = None


class GetWindowsServicesReportStartType(str, Enum):
    r"""Start Type"""

    AUTO_START = "AUTO_START"
    AUTO_START_DELAYED = "AUTO_START_DELAYED"
    BOOT_START = "BOOT_START"
    DEMAND_START = "DEMAND_START"
    DISABLED = "DISABLED"
    SYSTEM_START = "SYSTEM_START"


class GetWindowsServicesReportState(str, Enum):
    r"""State"""

    UNKNOWN = "UNKNOWN"
    STOPPED = "STOPPED"
    START_PENDING = "START_PENDING"
    RUNNING = "RUNNING"
    STOP_PENDING = "STOP_PENDING"
    PAUSE_PENDING = "PAUSE_PENDING"
    PAUSED = "PAUSED"
    CONTINUE_PENDING = "CONTINUE_PENDING"


class GetWindowsServicesReportResultsTypedDict(TypedDict):
    name: NotRequired[str]
    r"""Name"""
    display_name: NotRequired[str]
    r"""Display Name"""
    description: NotRequired[str]
    r"""Description"""
    start_type: NotRequired[GetWindowsServicesReportStartType]
    r"""Start Type"""
    user_name: NotRequired[str]
    r"""User Name"""
    state: NotRequired[GetWindowsServicesReportState]
    r"""State"""
    device_id: NotRequired[int]
    r"""Device identifier"""
    timestamp: NotRequired[float]
    r"""Date/Time when data was collected/updated"""


class GetWindowsServicesReportResults(BaseModel):
    name: Optional[str] = None
    r"""Name"""

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""Display Name"""

    description: Optional[str] = None
    r"""Description"""

    start_type: Annotated[
        Optional[GetWindowsServicesReportStartType], pydantic.Field(alias="startType")
    ] = None
    r"""Start Type"""

    user_name: Annotated[Optional[str], pydantic.Field(alias="userName")] = None
    r"""User Name"""

    state: Optional[GetWindowsServicesReportState] = None
    r"""State"""

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceId")] = None
    r"""Device identifier"""

    timestamp: Optional[float] = None
    r"""Date/Time when data was collected/updated"""


class GetWindowsServicesReportResponseBodyTypedDict(TypedDict):
    r"""default response"""

    cursor: NotRequired[GetWindowsServicesReportCursorTypedDict]
    results: NotRequired[List[GetWindowsServicesReportResultsTypedDict]]


class GetWindowsServicesReportResponseBody(BaseModel):
    r"""default response"""

    cursor: Optional[GetWindowsServicesReportCursor] = None

    results: Optional[List[GetWindowsServicesReportResults]] = None
